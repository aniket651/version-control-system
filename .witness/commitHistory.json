[{"rootDir":"/home/aniket/desk/Projects/version control system","message":"msg from argument","author":"author from argument","timestamp":1712209817139,"tree":{"files":[{"path":"/home/aniket/desk/Projects/version control system/classes//Blob.js","content":"import { createHash } from 'crypto';\nimport { writeFileSync } from \"fs\";\nimport { cwd } from 'process';\nimport Witness from \"./Witness.js\";\nimport { getInitiateObj as _getInitiateObj,findWitnessRoot } from \"../utils/utilities.js\";\nconst getInitiateObj = _getInitiateObj;\n\nconst currentDir = cwd();\n\nexport default class Blob{\n    constructor(content) {\n        try {\n            const rootDir = findWitnessRoot(currentDir);\n            const initObject = getInitiateObj(`${rootDir}/.witness/initiateObj.json`)\n    \n            this.content = content;\n            this.hash = this.calculateHash();\n            writeFileSync(`${initObject.rootDir}/.witness/objects/${this.hash}`, content);\n            \n        } catch (error) {\n            console.log(\"error in creating Blobs: \", error);\n        }\n    }\n\n    calculateHash() {\n        const hash = createHash('sha1').update(this.content).digest('hex');\n        return hash;\n    }\n}"},{"path":"/home/aniket/desk/Projects/version control system/classes//Commit.js","content":"import fs from \"fs\";\nimport Witness from \"./Witness.js\";\nimport Tree from \"./Tree.js\";\nimport CustomError from \"./CustomError.js\";\nimport { cwd } from 'process';\nimport { getInitiateObj as _getInitiateObj, findWitnessRoot} from \"../utils/utilities.js\";\nconst getInitiateObj = _getInitiateObj;\n\nconst currentDir = cwd();\n\nexport default class Commit{\n    constructor(message, author) {\n        try {\n            this.rootDir = findWitnessRoot(currentDir);\n            // const initObject = getInitiateObj(`${rootDir}/.witness/initiateObj`)\n            // initObject.versionId++;\n            // this.vId = initObject.versionId;\n            this.message = message;\n            this.author = author;\n            this.timestamp = Date.now();\n            this.tree = new Tree(this.rootDir); // Will be assigned a Tree object later\n            \n        } catch (error) {\n            console.log(\"error in creating Commit Object: \", error);            \n        }\n\n\n    }\n}"},{"path":"/home/aniket/desk/Projects/version control system/classes//CustomError.js","content":"export default class CustomError extends Error {\n    constructor(message) {\n      super(message);\n      this.name = \"MyCustomError\";\n    }\n  }"},{"path":"/home/aniket/desk/Projects/version control system/classes//Tree.js","content":"import { createHash } from 'crypto';\nimport { existsSync } from \"fs\";\nimport Witness from \"./Witness.js\";\nimport Blob from './Blob.js';\nimport { getInitiateObj as _getInitiateObj,getFilesSync } from \"../utils/utilities.js\";\nconst getInitiateObj = _getInitiateObj;\nimport path from 'path';\n\nexport default class Tree{\n    files = []\n    fileMap = {}\n    constructor(directory) {\n        try {\n            this.files = getFilesSync(directory);\n            this.files.forEach(element => {\n                // const blob = new Blob(element.content);\n                const hash = createHash('sha1').update(element.content).digest('hex');\n                this.fileMap[element.path] = hash;\n                if (!existsSync(`${directory}/.witness/objects/${hash}`)) {\n                    const blob = new Blob(element.content);\n                }\n            });\n            \n        } catch (error) {\n            console.log(\"error in creating Tree Object: \", error);\n        }\n    }\n\n\n\n    addFile(filename, content) {\n        const blob = new Blob(content);\n        this.entries[filename] = blob.hash;\n    }\n\n\n}"},{"path":"/home/aniket/desk/Projects/version control system/classes//Witness.js","content":"import { mkdirSync } from \"fs\";\n\nexport default class Witness {\n    constructor(dir) {\n        try {\n            mkdirSync(`.witness`);\n            mkdirSync(`.witness/objects`);\n            \n        } catch (error) {\n            console.error('Error creating directory:', error);    \n        }\n\n        this.rootDir = `${dir}/`;\n        this.versionId = 0;\n    }\n}\n"},{"path":"/home/aniket/desk/Projects/version control system/commands//commit.js","content":"import fs from \"fs\";\nimport Commit from \"../classes/Commit.js\";\nimport { getInitiateObj as _getInitiateObj, findWitnessRoot, getCommitHistory, insertCommit } from \"../utils/utilities.js\";\nimport { cwd } from 'process';\n\nfunction commit(msg, author) {\n\n\n    try {\n        const currentDir = cwd();\n\n        const commit = new Commit(msg, author);\n        console.log(commit);\n\n        insertCommit(commit);\n        const commitHistory = getCommitHistory(`${currentDir}/.witness/commitHistory.json`);\n\n        console.log(\"commit histoy is: \", commitHistory.tree.files);\n    } catch (error) {\n        console.log(error);\n    }\n\n\n}\n\ncommit(\"msg from argument\", \"author from argument\");"},{"path":"/home/aniket/desk/Projects/version control system/commands//initiate.js","content":"import { existsSync, writeFileSync } from \"fs\";\n// const initiate = require(\"..\");\nimport Witness from \"../classes/Witness.js\";\nimport { cwd } from 'process';\nimport { getInitiateObj as _getInitiateObj } from \"../utils/utilities.js\";\nconst getInitiateObj = _getInitiateObj;\n\nfunction initiate() {\n\n    const currentDir = cwd();\n\n    console.log(currentDir);\n    if (existsSync(`${currentDir}/.witness`)) {\n        console.log(\"witness has already been activated !\")\n        return;\n    }\n    const witness = new Witness(currentDir);//initializing witness\n\n    const commitHistory = [];\n\n\n\n\n    try {\n        writeFileSync(`${currentDir}/.witness/initiateObj.json`, JSON.stringify(witness));\n        console.log('initiateObj created successfully!');\n\n        writeFileSync(`${currentDir}/.witness/commitHistory.json`, JSON.stringify(commitHistory));\n        console.log('commitHistory created successfully!');\n        \n    } catch (error) {\n        console.error('Error creating initial files: ', error);\n        \n    }\n    \n    \n\n    const initObj = getInitiateObj(`${currentDir}/.witness/initiateObj.json`);\n\n    console.log(initObj);\n}\n\ninitiate();"},{"path":"/home/aniket/desk/Projects/version control system/hehe.cpp","content":"#include <iostream>\n#include <string>\n#include <unordered_map>\n#include <vector>\n#include <sstream>\n#include <crypto++/sha.h> // Include a cryptographic library for hashing\n\nusing namespace std;\nusing namespace CryptoPP;\n\n// Define a struct to represent a Blob object\nstruct Blob {\n  string content;\n  string hash;\n\n  // Calculate SHA-1 hash of the blob content\n  void calculateHash() {\n    SHA sha;\n    byte digest[SHA::DIGESTSIZE];\n    sha.CalculateDigest(digest, (const byte*)content.data(), content.size());\n    stringstream ss;\n    for (int i = 0; i < SHA::DIGESTSIZE; ++i) {\n      ss << hex << setw(2) << setfill('0') << (int)digest[i];\n    }\n    hash = ss.str();\n  }\n};\n\n// Define a struct to represent a Tree object\nstruct Tree {\n  unordered_map<string, string> entries; // Map of filename -> Blob hash\n\n  // Add a file (Blob) to the tree\n  void addFile(const string& filename, const Blob& blob) {\n    entries[filename] = blob.hash;\n  }\n};\n\n// Define a struct to represent a Commit object\nstruct Commit {\n  string message;\n  string author;\n  time_t timestamp;\n  Tree* tree; // Pointer to the referenced Tree object\n\n  // Constructor with basic details\n  Commit(const string& msg, const string& auth) : message(msg), author(auth), timestamp(time(nullptr)) {}\n};\n\nint main() {\n  // Create some Blobs (simulating files)\n  Blob blob1;\n  blob1.content = \"This is the content of file1.txt\";\n  blob1.calculateHash();\n\n  Blob blob2;\n  blob2.content = \"This is the content of file2.txt\";\n  blob2.calculateHash();\n\n  // Create a Tree with the Blobs\n  Tree tree;\n  tree.addFile(\"file1.txt\", blob1);\n  tree.addFile(\"file2.txt\", blob2);\n\n  // Create a Commit referencing the Tree\n  Commit commit(\"Initial commit\", \"John Doe\");\n  commit.tree = &tree;\n\n  // Simulate storing Blobs and Commit (not implemented here, would involve data structures)\n  cout << \"Blob1 hash: \" << blob1.hash << endl;\n  cout << \"Blob2 hash: \" << blob2.hash << endl;\n  cout << \"Commit message: \" << commit.message << endl;\n\n  return 0;\n}"},{"path":"/home/aniket/desk/Projects/version control system/index.js","content":"// const crypto = require('crypto'); // Use built-in crypto module for hashing\n// const fs = require(\"fs\");\n\n\n// // let versionId = 1;\n// // let rootDir = \"./\";\n\n// function isDirectory(path) {\n//     try {\n//         const stats = fs.statSync(path);\n//         return stats.isDirectory();\n//     } catch (err) {\n//         // Handle potential errors (e.g., path doesn't exist)\n//         return false; // Or throw an error if desired\n//     }\n// }\n\n// function getFilesSync(directoryPath) {\n//     const files = fs.readdirSync(directoryPath); // Get list of filenames\n//     const fileDetails = [];\n\n//     for (const filename of files) {\n//         const filePath = `${directoryPath}${filename}`; // Construct full path\n//         if (isDirectory(filePath)) {\n//             const innerFiles = getFilesSync(`${filePath}/`);\n//             fileDetails.push(...innerFiles);\n//         }\n//         else {\n//             const content = fs.readFileSync(filePath, 'utf8'); // Read file content\n//             fileDetails.push({ path: filePath, content }); // Store name and content\n//         }\n//     }\n//     return fileDetails;\n// }\n\n// class Witness {\n//     constructor() {\n//         fs.mkdir(`.witness`, (err) => {\n//             if (err) {\n//                 console.error('Error creating directory:', err);\n//             } else {\n//                 console.log('Directory created successfully!');\n//             }\n//         });\n//         fs.mkdir(`.witness/objects`, (err) => {\n//             if (err) {\n//                 console.error('Error creating directory:', err);\n//             } else {\n//                 console.log('Directory created successfully!');\n//             }\n//         })\n//         this.rootDir = `${__dirname}/`;\n//         this.versionId = 0;\n//     }\n// }\n\n\n\n\n\n// // Define a class to represent a Blob object\n// class Blob extends Witness {\n//     constructor(content) {\n//         this.content = content;\n//         this.hash = this.calculateHash();\n//         fs.writeFile(`${super.rootDir}/.witness/objects/${this.hash}`, content, (err) => {\n//             if (err) {\n//                 console.error('Error creating file:', err);\n//             } else {\n//                 console.log('File created successfully!');\n//             }\n//         });\n//     }\n\n//     calculateHash() {\n//         const hash = crypto.createHash('sha1').update(this.content).digest('hex');\n//         return hash;\n//     }\n// }\n\n// // Define a class to represent a Tree object\n// class Tree extends Witness{\n//     files = []\n//     fileMap = {}\n//     constructor(directory) {\n//         this.files = getFilesSync(directory);\n//         this.files.forEach(element => {\n//             // const blob = new Blob(element.content);\n//             const hash = crypto.createHash('sha1').update(element.content).digest('hex');\n//             this.fileMap[element.path] = hash;\n//             if (!fs.existsSync(`${super.rootDir}/.witness/objects/${hash}`)) {\n//                 const blob = new Blob(element.content);\n//             }\n//         });\n//     }\n\n\n\n//     addFile(filename, content) {\n//         const blob = new Blob(content);\n//         this.entries[filename] = blob.hash;\n//     }\n\n\n// }\n\n// // Define a class to represent a Commit object\n// class Commit extends Witness{\n//     constructor(message, author) {\n//         super.versionId++;\n//         this.vId = super.versionId;\n//         // this.treeHead = new Tree();\n//         this.message = message;\n//         this.author = author;\n//         this.timestamp = Date.now();\n//         this.tree = new Tree(super.rootDir); // Will be assigned a Tree object later\n\n\n//     }\n// }\n\n// function initiate() {\n//     console.log(\"hehe\");\n//     if (fs.existsSync(`${__dirname}/.witness`)) {\n//         console.log(\"witness has already been activated !\")\n//         return;\n//     }\n//     const witness = new Witness();//initializing witness\n//     console.log(witness);\n// }\n\n// function commit(msg, author) {\n//     const commit2 = new Commit(msg, author);\n//     console.log(commit2);\n// }\n\n\n// module.exports = initiate;\n\n\n// // console.log(commit);\n\n\n\n\n\n"},{"path":"/home/aniket/desk/Projects/version control system/node_modules//.package-lock.json","content":"{\n  \"name\": \"version-control-system\",\n  \"version\": \"1.0.0\",\n  \"lockfileVersion\": 3,\n  \"requires\": true,\n  \"packages\": {\n    \"node_modules/crypto\": {\n      \"version\": \"1.0.1\",\n      \"resolved\": \"https://registry.npmjs.org/crypto/-/crypto-1.0.1.tgz\",\n      \"integrity\": \"sha512-VxBKmeNcqQdiUQUW2Tzq0t377b54N2bMtXO/qiLa+6eRRmmC4qT3D4OnTGoT/U6O9aklQ/jTwbOtRMTTY8G0Ig==\",\n      \"deprecated\": \"This package is no longer supported. It's now a built-in Node module. If you've depended on crypto, you should switch to the one that's built-in.\"\n    }\n  }\n}\n"},{"path":"/home/aniket/desk/Projects/version control system/node_modules//crypto//README.md","content":"# Deprecated Package\n\nThis package is no longer supported and has been deprecated. To avoid malicious use, npm is hanging on to the package name.\n\nIt's now a built-in Node module. If you've depended on crypto, you should switch to the one that's built-in.\n\nPlease contact support@npmjs.com if you have questions about this package.\n"},{"path":"/home/aniket/desk/Projects/version control system/node_modules//crypto//package.json","content":"{\n  \"name\": \"crypto\",\n  \"version\": \"1.0.1\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/npm/deprecate-holder.git\"\n  },\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"bugs\": {\n    \"url\": \"https://github.com/npm/deprecate-holder/issues\"\n  },\n  \"homepage\": \"https://github.com/npm/deprecate-holder#readme\"\n}\n"},{"path":"/home/aniket/desk/Projects/version control system/package-lock.json","content":"{\n  \"name\": \"version-control-system\",\n  \"version\": \"1.0.0\",\n  \"lockfileVersion\": 3,\n  \"requires\": true,\n  \"packages\": {\n    \"\": {\n      \"name\": \"version-control-system\",\n      \"version\": \"1.0.0\",\n      \"license\": \"ISC\",\n      \"dependencies\": {\n        \"crypto\": \"^1.0.1\"\n      }\n    },\n    \"node_modules/crypto\": {\n      \"version\": \"1.0.1\",\n      \"resolved\": \"https://registry.npmjs.org/crypto/-/crypto-1.0.1.tgz\",\n      \"integrity\": \"sha512-VxBKmeNcqQdiUQUW2Tzq0t377b54N2bMtXO/qiLa+6eRRmmC4qT3D4OnTGoT/U6O9aklQ/jTwbOtRMTTY8G0Ig==\",\n      \"deprecated\": \"This package is no longer supported. It's now a built-in Node module. If you've depended on crypto, you should switch to the one that's built-in.\"\n    }\n  }\n}\n"},{"path":"/home/aniket/desk/Projects/version control system/package.json","content":"{\n  \"name\": \"version-control-system\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"type\": \"module\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"author\": \"aniket pandey\",\n  \"license\": \"ISC\",\n  \"dependencies\": {\n    \"crypto\": \"^1.0.1\"\n  }\n}\n"},{"path":"/home/aniket/desk/Projects/version control system/utils//utilities.js","content":"// const fs = require(\"fs\");\nimport { cwd } from 'process';\nimport CustomError from \"../classes/CustomError.js\";\nimport { statSync, readdirSync, readFileSync, accessSync, constants, writeFileSync } from \"fs\";\nimport path from 'path';\n\nexport function isDirectory(path) {\n    try {\n        const stats = statSync(path);\n        return stats.isDirectory();\n    } catch (err) {\n        // Handle potential errors (e.g., path doesn't exist)\n        return false; // Or throw an error if desired\n    }\n}\n\n\nexport function getFilesSync(directoryPath) {\n    try {\n        const files = readdirSync(directoryPath); // Get list of filenames\n        const fileDetails = [];\n    \n        for (const filename of files) {\n            if(filename===\".witness\"){\n                continue;\n            }\n            const filePath = `${directoryPath}/${filename}`; // Construct full path\n            if (isDirectory(filePath)) {\n                const innerFiles = getFilesSync(`${filePath}/`);\n                fileDetails.push(...innerFiles);\n            }\n            else {\n                const content = readFileSync(filePath, 'utf8'); // Read file content\n                fileDetails.push({ path: filePath, content }); // Store name and content\n            }\n        }\n        return fileDetails;\n        \n    } catch (error) {\n        console.log(\"error in getFilesSync: \", error);\n    }\n}\n\n\nexport function getInitiateObj(path){\n    try {\n        const initiateStr = readFileSync(path, 'utf-8');\n        const initiateObj = JSON.parse(initiateStr);\n        console.log(`the InitiateObj is: ${initiateObj}`);\n        return initiateObj;\n    } catch (error) {\n        console.log(`error while reading InitiateObj: ${error}`);\n    }\n}\n\nexport function getCommitHistory(path){\n    try {\n        const historyStr = readFileSync(path, 'utf-8');\n        const historyObj = JSON.parse(historyStr);\n        return historyObj;\n    } catch (error) {\n        console.log(\"error in getting commit history: \", error);\n    }\n}\n\nexport function insertCommit(commitObj){\n    try {\n        const root = commitObj.rootDir;\n        const commitHistory = getCommitHistory(`${root}/.witness/commitHistory.json`);\n        commitHistory.push(commitObj);\n        writeFileSync(`${root}/.witness/commitHistory.json`,JSON.stringify(commitHistory));\n        return commitHistory;\n    } catch (error) {\n        console.log(\"error in inserting new commit in history: \", error);\n    }\n}\n\nexport function findWitnessRoot(currentDir) {\n    try {\n        console.log(\"inside findWitnessRoot, currentDir is: \" ,currentDir);\n        // const currentDir = cwd();\n        if(accessSync(`${currentDir}/.witness`, constants.F_OK) === undefined){\n            return currentDir;\n        }\n        else if(currentDir === \"/\"){\n            throw new CustomError(\".witness directory not found!!\")\n        }\n        else return findWitnessRoot(path.dirname(currentDir))\n    } catch (error) {\n        console.log(\"error in finding .Witness directory\",error);\n    }\n  }\n\n\n\n\n  // Example usage\n  const currentPath = process.cwd();"}],"fileMap":{"/home/aniket/desk/Projects/version control system/classes//Blob.js":"46649e08812b8e8cbb185c2f672b5900bee682e9","/home/aniket/desk/Projects/version control system/classes//Commit.js":"a41e8fe0f100d39cb508b53303ef045dd4984cdb","/home/aniket/desk/Projects/version control system/classes//CustomError.js":"92ed2e18fc71d78f74121e15c6d8e05d11bc9c6c","/home/aniket/desk/Projects/version control system/classes//Tree.js":"ea5d8a2a1ef2a071b63b82eda40ff6e088e3a453","/home/aniket/desk/Projects/version control system/classes//Witness.js":"33502d5ca0dcf022772b7917fb9a43404587091b","/home/aniket/desk/Projects/version control system/commands//commit.js":"6bebf6c05ded3541749f54ba0cd39dd4b9e7d688","/home/aniket/desk/Projects/version control system/commands//initiate.js":"5082a006125e3321695f8028bd47245887ed347a","/home/aniket/desk/Projects/version control system/hehe.cpp":"50377f4229a6731053971c84076f7918f1d59cbd","/home/aniket/desk/Projects/version control system/index.js":"70f6c9d7d4b85176b7ba17ff6981a0348d6e0b09","/home/aniket/desk/Projects/version control system/node_modules//.package-lock.json":"12cdd4150943a93e0de79a933481a461a0984d3e","/home/aniket/desk/Projects/version control system/node_modules//crypto//README.md":"db31576d2541b2711331f43fec5f386365b48804","/home/aniket/desk/Projects/version control system/node_modules//crypto//package.json":"815f5deb5efafe119152c2f0d67f35359a1e9fb9","/home/aniket/desk/Projects/version control system/package-lock.json":"d03daad4a8980f371d606c9a412c01ab949404a1","/home/aniket/desk/Projects/version control system/package.json":"f0f4c7c0f675d4a4deb66d3b8787d5f1b96429a4","/home/aniket/desk/Projects/version control system/utils//utilities.js":"2723bb8b4dd2d683fe4f3aa0627952372861cc16"}}},{"rootDir":"/home/aniket/desk/Projects/version control system","message":"msg from argument","author":"author from argument","timestamp":1712209887245,"tree":{"files":[{"path":"/home/aniket/desk/Projects/version control system/classes//Blob.js","content":"import { createHash } from 'crypto';\nimport { writeFileSync } from \"fs\";\nimport { cwd } from 'process';\nimport Witness from \"./Witness.js\";\nimport { getInitiateObj as _getInitiateObj,findWitnessRoot } from \"../utils/utilities.js\";\nconst getInitiateObj = _getInitiateObj;\n\nconst currentDir = cwd();\n\nexport default class Blob{\n    constructor(content) {\n        try {\n            const rootDir = findWitnessRoot(currentDir);\n            const initObject = getInitiateObj(`${rootDir}/.witness/initiateObj.json`)\n    \n            this.content = content;\n            this.hash = this.calculateHash();\n            writeFileSync(`${initObject.rootDir}/.witness/objects/${this.hash}`, content);\n            \n        } catch (error) {\n            console.log(\"error in creating Blobs: \", error);\n        }\n    }\n\n    calculateHash() {\n        const hash = createHash('sha1').update(this.content).digest('hex');\n        return hash;\n    }\n}"},{"path":"/home/aniket/desk/Projects/version control system/classes//Commit.js","content":"import fs from \"fs\";\nimport Witness from \"./Witness.js\";\nimport Tree from \"./Tree.js\";\nimport CustomError from \"./CustomError.js\";\nimport { cwd } from 'process';\nimport { getInitiateObj as _getInitiateObj, findWitnessRoot} from \"../utils/utilities.js\";\nconst getInitiateObj = _getInitiateObj;\n\nconst currentDir = cwd();\n\nexport default class Commit{\n    constructor(message, author) {\n        try {\n            this.rootDir = findWitnessRoot(currentDir);\n            // const initObject = getInitiateObj(`${rootDir}/.witness/initiateObj`)\n            // initObject.versionId++;\n            // this.vId = initObject.versionId;\n            this.message = message;\n            this.author = author;\n            this.timestamp = Date.now();\n            this.tree = new Tree(this.rootDir); // Will be assigned a Tree object later\n            \n        } catch (error) {\n            console.log(\"error in creating Commit Object: \", error);            \n        }\n\n\n    }\n}"},{"path":"/home/aniket/desk/Projects/version control system/classes//CustomError.js","content":"export default class CustomError extends Error {\n    constructor(message) {\n      super(message);\n      this.name = \"MyCustomError\";\n    }\n  }"},{"path":"/home/aniket/desk/Projects/version control system/classes//Tree.js","content":"import { createHash } from 'crypto';\nimport { existsSync } from \"fs\";\nimport Witness from \"./Witness.js\";\nimport Blob from './Blob.js';\nimport { getInitiateObj as _getInitiateObj,getFilesSync } from \"../utils/utilities.js\";\nconst getInitiateObj = _getInitiateObj;\nimport path from 'path';\n\nexport default class Tree{\n    files = []\n    fileMap = {}\n    constructor(directory) {\n        try {\n            this.files = getFilesSync(directory);\n            this.files.forEach(element => {\n                // const blob = new Blob(element.content);\n                const hash = createHash('sha1').update(element.content).digest('hex');\n                this.fileMap[element.path] = hash;\n                if (!existsSync(`${directory}/.witness/objects/${hash}`)) {\n                    const blob = new Blob(element.content);\n                }\n            });\n            \n        } catch (error) {\n            console.log(\"error in creating Tree Object: \", error);\n        }\n    }\n\n\n\n    addFile(filename, content) {\n        const blob = new Blob(content);\n        this.entries[filename] = blob.hash;\n    }\n\n\n}"},{"path":"/home/aniket/desk/Projects/version control system/classes//Witness.js","content":"import { mkdirSync } from \"fs\";\n\nexport default class Witness {\n    constructor(dir) {\n        try {\n            mkdirSync(`.witness`);\n            mkdirSync(`.witness/objects`);\n            \n        } catch (error) {\n            console.error('Error creating directory:', error);    \n        }\n\n        this.rootDir = `${dir}/`;\n        this.versionId = 0;\n    }\n}\n"},{"path":"/home/aniket/desk/Projects/version control system/commands//commit.js","content":"import fs from \"fs\";\nimport Commit from \"../classes/Commit.js\";\nimport { getInitiateObj as _getInitiateObj, findWitnessRoot, getCommitHistory, insertCommit } from \"../utils/utilities.js\";\nimport { cwd } from 'process';\n\nfunction commit(msg, author) {\n\n\n    try {\n        const currentDir = cwd();\n\n        const commit = new Commit(msg, author);\n        console.log(commit);\n\n        insertCommit(commit);\n        const commitHistory = getCommitHistory(`${currentDir}/.witness/commitHistory.json`);\n\n        console.log(\"commit histoy is: \", commitHistory.fileMap);\n    } catch (error) {\n        console.log(error);\n    }\n\n\n}\n\ncommit(\"msg from argument\", \"author from argument\");"},{"path":"/home/aniket/desk/Projects/version control system/commands//initiate.js","content":"import { existsSync, writeFileSync } from \"fs\";\n// const initiate = require(\"..\");\nimport Witness from \"../classes/Witness.js\";\nimport { cwd } from 'process';\nimport { getInitiateObj as _getInitiateObj } from \"../utils/utilities.js\";\nconst getInitiateObj = _getInitiateObj;\n\nfunction initiate() {\n\n    const currentDir = cwd();\n\n    console.log(currentDir);\n    if (existsSync(`${currentDir}/.witness`)) {\n        console.log(\"witness has already been activated !\")\n        return;\n    }\n    const witness = new Witness(currentDir);//initializing witness\n\n    const commitHistory = [];\n\n\n\n\n    try {\n        writeFileSync(`${currentDir}/.witness/initiateObj.json`, JSON.stringify(witness));\n        console.log('initiateObj created successfully!');\n\n        writeFileSync(`${currentDir}/.witness/commitHistory.json`, JSON.stringify(commitHistory));\n        console.log('commitHistory created successfully!');\n        \n    } catch (error) {\n        console.error('Error creating initial files: ', error);\n        \n    }\n    \n    \n\n    const initObj = getInitiateObj(`${currentDir}/.witness/initiateObj.json`);\n\n    console.log(initObj);\n}\n\ninitiate();"},{"path":"/home/aniket/desk/Projects/version control system/hehe.cpp","content":"#include <iostream>\n#include <string>\n#include <unordered_map>\n#include <vector>\n#include <sstream>\n#include <crypto++/sha.h> // Include a cryptographic library for hashing\n\nusing namespace std;\nusing namespace CryptoPP;\n\n// Define a struct to represent a Blob object\nstruct Blob {\n  string content;\n  string hash;\n\n  // Calculate SHA-1 hash of the blob content\n  void calculateHash() {\n    SHA sha;\n    byte digest[SHA::DIGESTSIZE];\n    sha.CalculateDigest(digest, (const byte*)content.data(), content.size());\n    stringstream ss;\n    for (int i = 0; i < SHA::DIGESTSIZE; ++i) {\n      ss << hex << setw(2) << setfill('0') << (int)digest[i];\n    }\n    hash = ss.str();\n  }\n};\n\n// Define a struct to represent a Tree object\nstruct Tree {\n  unordered_map<string, string> entries; // Map of filename -> Blob hash\n\n  // Add a file (Blob) to the tree\n  void addFile(const string& filename, const Blob& blob) {\n    entries[filename] = blob.hash;\n  }\n};\n\n// Define a struct to represent a Commit object\nstruct Commit {\n  string message;\n  string author;\n  time_t timestamp;\n  Tree* tree; // Pointer to the referenced Tree object\n\n  // Constructor with basic details\n  Commit(const string& msg, const string& auth) : message(msg), author(auth), timestamp(time(nullptr)) {}\n};\n\nint main() {\n  // Create some Blobs (simulating files)\n  Blob blob1;\n  blob1.content = \"This is the content of file1.txt\";\n  blob1.calculateHash();\n\n  Blob blob2;\n  blob2.content = \"This is the content of file2.txt\";\n  blob2.calculateHash();\n\n  // Create a Tree with the Blobs\n  Tree tree;\n  tree.addFile(\"file1.txt\", blob1);\n  tree.addFile(\"file2.txt\", blob2);\n\n  // Create a Commit referencing the Tree\n  Commit commit(\"Initial commit\", \"John Doe\");\n  commit.tree = &tree;\n\n  // Simulate storing Blobs and Commit (not implemented here, would involve data structures)\n  cout << \"Blob1 hash: \" << blob1.hash << endl;\n  cout << \"Blob2 hash: \" << blob2.hash << endl;\n  cout << \"Commit message: \" << commit.message << endl;\n\n  return 0;\n}"},{"path":"/home/aniket/desk/Projects/version control system/index.js","content":"// const crypto = require('crypto'); // Use built-in crypto module for hashing\n// const fs = require(\"fs\");\n\n\n// // let versionId = 1;\n// // let rootDir = \"./\";\n\n// function isDirectory(path) {\n//     try {\n//         const stats = fs.statSync(path);\n//         return stats.isDirectory();\n//     } catch (err) {\n//         // Handle potential errors (e.g., path doesn't exist)\n//         return false; // Or throw an error if desired\n//     }\n// }\n\n// function getFilesSync(directoryPath) {\n//     const files = fs.readdirSync(directoryPath); // Get list of filenames\n//     const fileDetails = [];\n\n//     for (const filename of files) {\n//         const filePath = `${directoryPath}${filename}`; // Construct full path\n//         if (isDirectory(filePath)) {\n//             const innerFiles = getFilesSync(`${filePath}/`);\n//             fileDetails.push(...innerFiles);\n//         }\n//         else {\n//             const content = fs.readFileSync(filePath, 'utf8'); // Read file content\n//             fileDetails.push({ path: filePath, content }); // Store name and content\n//         }\n//     }\n//     return fileDetails;\n// }\n\n// class Witness {\n//     constructor() {\n//         fs.mkdir(`.witness`, (err) => {\n//             if (err) {\n//                 console.error('Error creating directory:', err);\n//             } else {\n//                 console.log('Directory created successfully!');\n//             }\n//         });\n//         fs.mkdir(`.witness/objects`, (err) => {\n//             if (err) {\n//                 console.error('Error creating directory:', err);\n//             } else {\n//                 console.log('Directory created successfully!');\n//             }\n//         })\n//         this.rootDir = `${__dirname}/`;\n//         this.versionId = 0;\n//     }\n// }\n\n\n\n\n\n// // Define a class to represent a Blob object\n// class Blob extends Witness {\n//     constructor(content) {\n//         this.content = content;\n//         this.hash = this.calculateHash();\n//         fs.writeFile(`${super.rootDir}/.witness/objects/${this.hash}`, content, (err) => {\n//             if (err) {\n//                 console.error('Error creating file:', err);\n//             } else {\n//                 console.log('File created successfully!');\n//             }\n//         });\n//     }\n\n//     calculateHash() {\n//         const hash = crypto.createHash('sha1').update(this.content).digest('hex');\n//         return hash;\n//     }\n// }\n\n// // Define a class to represent a Tree object\n// class Tree extends Witness{\n//     files = []\n//     fileMap = {}\n//     constructor(directory) {\n//         this.files = getFilesSync(directory);\n//         this.files.forEach(element => {\n//             // const blob = new Blob(element.content);\n//             const hash = crypto.createHash('sha1').update(element.content).digest('hex');\n//             this.fileMap[element.path] = hash;\n//             if (!fs.existsSync(`${super.rootDir}/.witness/objects/${hash}`)) {\n//                 const blob = new Blob(element.content);\n//             }\n//         });\n//     }\n\n\n\n//     addFile(filename, content) {\n//         const blob = new Blob(content);\n//         this.entries[filename] = blob.hash;\n//     }\n\n\n// }\n\n// // Define a class to represent a Commit object\n// class Commit extends Witness{\n//     constructor(message, author) {\n//         super.versionId++;\n//         this.vId = super.versionId;\n//         // this.treeHead = new Tree();\n//         this.message = message;\n//         this.author = author;\n//         this.timestamp = Date.now();\n//         this.tree = new Tree(super.rootDir); // Will be assigned a Tree object later\n\n\n//     }\n// }\n\n// function initiate() {\n//     console.log(\"hehe\");\n//     if (fs.existsSync(`${__dirname}/.witness`)) {\n//         console.log(\"witness has already been activated !\")\n//         return;\n//     }\n//     const witness = new Witness();//initializing witness\n//     console.log(witness);\n// }\n\n// function commit(msg, author) {\n//     const commit2 = new Commit(msg, author);\n//     console.log(commit2);\n// }\n\n\n// module.exports = initiate;\n\n\n// // console.log(commit);\n\n\n\n\n\n"},{"path":"/home/aniket/desk/Projects/version control system/node_modules//.package-lock.json","content":"{\n  \"name\": \"version-control-system\",\n  \"version\": \"1.0.0\",\n  \"lockfileVersion\": 3,\n  \"requires\": true,\n  \"packages\": {\n    \"node_modules/crypto\": {\n      \"version\": \"1.0.1\",\n      \"resolved\": \"https://registry.npmjs.org/crypto/-/crypto-1.0.1.tgz\",\n      \"integrity\": \"sha512-VxBKmeNcqQdiUQUW2Tzq0t377b54N2bMtXO/qiLa+6eRRmmC4qT3D4OnTGoT/U6O9aklQ/jTwbOtRMTTY8G0Ig==\",\n      \"deprecated\": \"This package is no longer supported. It's now a built-in Node module. If you've depended on crypto, you should switch to the one that's built-in.\"\n    }\n  }\n}\n"},{"path":"/home/aniket/desk/Projects/version control system/node_modules//crypto//README.md","content":"# Deprecated Package\n\nThis package is no longer supported and has been deprecated. To avoid malicious use, npm is hanging on to the package name.\n\nIt's now a built-in Node module. If you've depended on crypto, you should switch to the one that's built-in.\n\nPlease contact support@npmjs.com if you have questions about this package.\n"},{"path":"/home/aniket/desk/Projects/version control system/node_modules//crypto//package.json","content":"{\n  \"name\": \"crypto\",\n  \"version\": \"1.0.1\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/npm/deprecate-holder.git\"\n  },\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"bugs\": {\n    \"url\": \"https://github.com/npm/deprecate-holder/issues\"\n  },\n  \"homepage\": \"https://github.com/npm/deprecate-holder#readme\"\n}\n"},{"path":"/home/aniket/desk/Projects/version control system/package-lock.json","content":"{\n  \"name\": \"version-control-system\",\n  \"version\": \"1.0.0\",\n  \"lockfileVersion\": 3,\n  \"requires\": true,\n  \"packages\": {\n    \"\": {\n      \"name\": \"version-control-system\",\n      \"version\": \"1.0.0\",\n      \"license\": \"ISC\",\n      \"dependencies\": {\n        \"crypto\": \"^1.0.1\"\n      }\n    },\n    \"node_modules/crypto\": {\n      \"version\": \"1.0.1\",\n      \"resolved\": \"https://registry.npmjs.org/crypto/-/crypto-1.0.1.tgz\",\n      \"integrity\": \"sha512-VxBKmeNcqQdiUQUW2Tzq0t377b54N2bMtXO/qiLa+6eRRmmC4qT3D4OnTGoT/U6O9aklQ/jTwbOtRMTTY8G0Ig==\",\n      \"deprecated\": \"This package is no longer supported. It's now a built-in Node module. If you've depended on crypto, you should switch to the one that's built-in.\"\n    }\n  }\n}\n"},{"path":"/home/aniket/desk/Projects/version control system/package.json","content":"{\n  \"name\": \"version-control-system\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"type\": \"module\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"author\": \"aniket pandey\",\n  \"license\": \"ISC\",\n  \"dependencies\": {\n    \"crypto\": \"^1.0.1\"\n  }\n}\n"},{"path":"/home/aniket/desk/Projects/version control system/utils//utilities.js","content":"// const fs = require(\"fs\");\nimport { cwd } from 'process';\nimport CustomError from \"../classes/CustomError.js\";\nimport { statSync, readdirSync, readFileSync, accessSync, constants, writeFileSync } from \"fs\";\nimport path from 'path';\n\nexport function isDirectory(path) {\n    try {\n        const stats = statSync(path);\n        return stats.isDirectory();\n    } catch (err) {\n        // Handle potential errors (e.g., path doesn't exist)\n        return false; // Or throw an error if desired\n    }\n}\n\n\nexport function getFilesSync(directoryPath) {\n    try {\n        const files = readdirSync(directoryPath); // Get list of filenames\n        const fileDetails = [];\n    \n        for (const filename of files) {\n            if(filename===\".witness\"){\n                continue;\n            }\n            const filePath = `${directoryPath}/${filename}`; // Construct full path\n            if (isDirectory(filePath)) {\n                const innerFiles = getFilesSync(`${filePath}/`);\n                fileDetails.push(...innerFiles);\n            }\n            else {\n                const content = readFileSync(filePath, 'utf8'); // Read file content\n                fileDetails.push({ path: filePath, content }); // Store name and content\n            }\n        }\n        return fileDetails;\n        \n    } catch (error) {\n        console.log(\"error in getFilesSync: \", error);\n    }\n}\n\n\nexport function getInitiateObj(path){\n    try {\n        const initiateStr = readFileSync(path, 'utf-8');\n        const initiateObj = JSON.parse(initiateStr);\n        console.log(`the InitiateObj is: ${initiateObj}`);\n        return initiateObj;\n    } catch (error) {\n        console.log(`error while reading InitiateObj: ${error}`);\n    }\n}\n\nexport function getCommitHistory(path){\n    try {\n        const historyStr = readFileSync(path, 'utf-8');\n        const historyObj = JSON.parse(historyStr);\n        return historyObj;\n    } catch (error) {\n        console.log(\"error in getting commit history: \", error);\n    }\n}\n\nexport function insertCommit(commitObj){\n    try {\n        const root = commitObj.rootDir;\n        const commitHistory = getCommitHistory(`${root}/.witness/commitHistory.json`);\n        commitHistory.push(commitObj);\n        writeFileSync(`${root}/.witness/commitHistory.json`,JSON.stringify(commitHistory));\n        return commitHistory;\n    } catch (error) {\n        console.log(\"error in inserting new commit in history: \", error);\n    }\n}\n\nexport function findWitnessRoot(currentDir) {\n    try {\n        console.log(\"inside findWitnessRoot, currentDir is: \" ,currentDir);\n        // const currentDir = cwd();\n        if(accessSync(`${currentDir}/.witness`, constants.F_OK) === undefined){\n            return currentDir;\n        }\n        else if(currentDir === \"/\"){\n            throw new CustomError(\".witness directory not found!!\")\n        }\n        else return findWitnessRoot(path.dirname(currentDir))\n    } catch (error) {\n        console.log(\"error in finding .Witness directory\",error);\n    }\n  }\n\n\n\n\n  // Example usage\n  const currentPath = process.cwd();"}],"fileMap":{"/home/aniket/desk/Projects/version control system/classes//Blob.js":"46649e08812b8e8cbb185c2f672b5900bee682e9","/home/aniket/desk/Projects/version control system/classes//Commit.js":"a41e8fe0f100d39cb508b53303ef045dd4984cdb","/home/aniket/desk/Projects/version control system/classes//CustomError.js":"92ed2e18fc71d78f74121e15c6d8e05d11bc9c6c","/home/aniket/desk/Projects/version control system/classes//Tree.js":"ea5d8a2a1ef2a071b63b82eda40ff6e088e3a453","/home/aniket/desk/Projects/version control system/classes//Witness.js":"33502d5ca0dcf022772b7917fb9a43404587091b","/home/aniket/desk/Projects/version control system/commands//commit.js":"4ab18fd1cb9b7c458e8b8939502d30f85dfc2ae3","/home/aniket/desk/Projects/version control system/commands//initiate.js":"5082a006125e3321695f8028bd47245887ed347a","/home/aniket/desk/Projects/version control system/hehe.cpp":"50377f4229a6731053971c84076f7918f1d59cbd","/home/aniket/desk/Projects/version control system/index.js":"70f6c9d7d4b85176b7ba17ff6981a0348d6e0b09","/home/aniket/desk/Projects/version control system/node_modules//.package-lock.json":"12cdd4150943a93e0de79a933481a461a0984d3e","/home/aniket/desk/Projects/version control system/node_modules//crypto//README.md":"db31576d2541b2711331f43fec5f386365b48804","/home/aniket/desk/Projects/version control system/node_modules//crypto//package.json":"815f5deb5efafe119152c2f0d67f35359a1e9fb9","/home/aniket/desk/Projects/version control system/package-lock.json":"d03daad4a8980f371d606c9a412c01ab949404a1","/home/aniket/desk/Projects/version control system/package.json":"f0f4c7c0f675d4a4deb66d3b8787d5f1b96429a4","/home/aniket/desk/Projects/version control system/utils//utilities.js":"2723bb8b4dd2d683fe4f3aa0627952372861cc16"}}},{"rootDir":"/home/aniket/desk/Projects/version control system","message":"msg from argument","author":"author from argument","timestamp":1712209911057,"tree":{"files":[{"path":"/home/aniket/desk/Projects/version control system/classes//Blob.js","content":"import { createHash } from 'crypto';\nimport { writeFileSync } from \"fs\";\nimport { cwd } from 'process';\nimport Witness from \"./Witness.js\";\nimport { getInitiateObj as _getInitiateObj,findWitnessRoot } from \"../utils/utilities.js\";\nconst getInitiateObj = _getInitiateObj;\n\nconst currentDir = cwd();\n\nexport default class Blob{\n    constructor(content) {\n        try {\n            const rootDir = findWitnessRoot(currentDir);\n            const initObject = getInitiateObj(`${rootDir}/.witness/initiateObj.json`)\n    \n            this.content = content;\n            this.hash = this.calculateHash();\n            writeFileSync(`${initObject.rootDir}/.witness/objects/${this.hash}`, content);\n            \n        } catch (error) {\n            console.log(\"error in creating Blobs: \", error);\n        }\n    }\n\n    calculateHash() {\n        const hash = createHash('sha1').update(this.content).digest('hex');\n        return hash;\n    }\n}"},{"path":"/home/aniket/desk/Projects/version control system/classes//Commit.js","content":"import fs from \"fs\";\nimport Witness from \"./Witness.js\";\nimport Tree from \"./Tree.js\";\nimport CustomError from \"./CustomError.js\";\nimport { cwd } from 'process';\nimport { getInitiateObj as _getInitiateObj, findWitnessRoot} from \"../utils/utilities.js\";\nconst getInitiateObj = _getInitiateObj;\n\nconst currentDir = cwd();\n\nexport default class Commit{\n    constructor(message, author) {\n        try {\n            this.rootDir = findWitnessRoot(currentDir);\n            // const initObject = getInitiateObj(`${rootDir}/.witness/initiateObj`)\n            // initObject.versionId++;\n            // this.vId = initObject.versionId;\n            this.message = message;\n            this.author = author;\n            this.timestamp = Date.now();\n            this.tree = new Tree(this.rootDir); // Will be assigned a Tree object later\n            \n        } catch (error) {\n            console.log(\"error in creating Commit Object: \", error);            \n        }\n\n\n    }\n}"},{"path":"/home/aniket/desk/Projects/version control system/classes//CustomError.js","content":"export default class CustomError extends Error {\n    constructor(message) {\n      super(message);\n      this.name = \"MyCustomError\";\n    }\n  }"},{"path":"/home/aniket/desk/Projects/version control system/classes//Tree.js","content":"import { createHash } from 'crypto';\nimport { existsSync } from \"fs\";\nimport Witness from \"./Witness.js\";\nimport Blob from './Blob.js';\nimport { getInitiateObj as _getInitiateObj,getFilesSync } from \"../utils/utilities.js\";\nconst getInitiateObj = _getInitiateObj;\nimport path from 'path';\n\nexport default class Tree{\n    files = []\n    fileMap = {}\n    constructor(directory) {\n        try {\n            this.files = getFilesSync(directory);\n            this.files.forEach(element => {\n                // const blob = new Blob(element.content);\n                const hash = createHash('sha1').update(element.content).digest('hex');\n                this.fileMap[element.path] = hash;\n                if (!existsSync(`${directory}/.witness/objects/${hash}`)) {\n                    const blob = new Blob(element.content);\n                }\n            });\n            \n        } catch (error) {\n            console.log(\"error in creating Tree Object: \", error);\n        }\n    }\n\n\n\n    addFile(filename, content) {\n        const blob = new Blob(content);\n        this.entries[filename] = blob.hash;\n    }\n\n\n}"},{"path":"/home/aniket/desk/Projects/version control system/classes//Witness.js","content":"import { mkdirSync } from \"fs\";\n\nexport default class Witness {\n    constructor(dir) {\n        try {\n            mkdirSync(`.witness`);\n            mkdirSync(`.witness/objects`);\n            \n        } catch (error) {\n            console.error('Error creating directory:', error);    \n        }\n\n        this.rootDir = `${dir}/`;\n        this.versionId = 0;\n    }\n}\n"},{"path":"/home/aniket/desk/Projects/version control system/commands//commit.js","content":"import fs from \"fs\";\nimport Commit from \"../classes/Commit.js\";\nimport { getInitiateObj as _getInitiateObj, findWitnessRoot, getCommitHistory, insertCommit } from \"../utils/utilities.js\";\nimport { cwd } from 'process';\n\nfunction commit(msg, author) {\n\n\n    try {\n        const currentDir = cwd();\n\n        const commit = new Commit(msg, author);\n        console.log(commit);\n\n        insertCommit(commit);\n        const commitHistory = getCommitHistory(`${currentDir}/.witness/commitHistory.json`);\n\n        console.log(\"commit histoy is: \", commitHistory[\"fileMap\"]);\n    } catch (error) {\n        console.log(error);\n    }\n\n\n}\n\ncommit(\"msg from argument\", \"author from argument\");"},{"path":"/home/aniket/desk/Projects/version control system/commands//initiate.js","content":"import { existsSync, writeFileSync } from \"fs\";\n// const initiate = require(\"..\");\nimport Witness from \"../classes/Witness.js\";\nimport { cwd } from 'process';\nimport { getInitiateObj as _getInitiateObj } from \"../utils/utilities.js\";\nconst getInitiateObj = _getInitiateObj;\n\nfunction initiate() {\n\n    const currentDir = cwd();\n\n    console.log(currentDir);\n    if (existsSync(`${currentDir}/.witness`)) {\n        console.log(\"witness has already been activated !\")\n        return;\n    }\n    const witness = new Witness(currentDir);//initializing witness\n\n    const commitHistory = [];\n\n\n\n\n    try {\n        writeFileSync(`${currentDir}/.witness/initiateObj.json`, JSON.stringify(witness));\n        console.log('initiateObj created successfully!');\n\n        writeFileSync(`${currentDir}/.witness/commitHistory.json`, JSON.stringify(commitHistory));\n        console.log('commitHistory created successfully!');\n        \n    } catch (error) {\n        console.error('Error creating initial files: ', error);\n        \n    }\n    \n    \n\n    const initObj = getInitiateObj(`${currentDir}/.witness/initiateObj.json`);\n\n    console.log(initObj);\n}\n\ninitiate();"},{"path":"/home/aniket/desk/Projects/version control system/hehe.cpp","content":"#include <iostream>\n#include <string>\n#include <unordered_map>\n#include <vector>\n#include <sstream>\n#include <crypto++/sha.h> // Include a cryptographic library for hashing\n\nusing namespace std;\nusing namespace CryptoPP;\n\n// Define a struct to represent a Blob object\nstruct Blob {\n  string content;\n  string hash;\n\n  // Calculate SHA-1 hash of the blob content\n  void calculateHash() {\n    SHA sha;\n    byte digest[SHA::DIGESTSIZE];\n    sha.CalculateDigest(digest, (const byte*)content.data(), content.size());\n    stringstream ss;\n    for (int i = 0; i < SHA::DIGESTSIZE; ++i) {\n      ss << hex << setw(2) << setfill('0') << (int)digest[i];\n    }\n    hash = ss.str();\n  }\n};\n\n// Define a struct to represent a Tree object\nstruct Tree {\n  unordered_map<string, string> entries; // Map of filename -> Blob hash\n\n  // Add a file (Blob) to the tree\n  void addFile(const string& filename, const Blob& blob) {\n    entries[filename] = blob.hash;\n  }\n};\n\n// Define a struct to represent a Commit object\nstruct Commit {\n  string message;\n  string author;\n  time_t timestamp;\n  Tree* tree; // Pointer to the referenced Tree object\n\n  // Constructor with basic details\n  Commit(const string& msg, const string& auth) : message(msg), author(auth), timestamp(time(nullptr)) {}\n};\n\nint main() {\n  // Create some Blobs (simulating files)\n  Blob blob1;\n  blob1.content = \"This is the content of file1.txt\";\n  blob1.calculateHash();\n\n  Blob blob2;\n  blob2.content = \"This is the content of file2.txt\";\n  blob2.calculateHash();\n\n  // Create a Tree with the Blobs\n  Tree tree;\n  tree.addFile(\"file1.txt\", blob1);\n  tree.addFile(\"file2.txt\", blob2);\n\n  // Create a Commit referencing the Tree\n  Commit commit(\"Initial commit\", \"John Doe\");\n  commit.tree = &tree;\n\n  // Simulate storing Blobs and Commit (not implemented here, would involve data structures)\n  cout << \"Blob1 hash: \" << blob1.hash << endl;\n  cout << \"Blob2 hash: \" << blob2.hash << endl;\n  cout << \"Commit message: \" << commit.message << endl;\n\n  return 0;\n}"},{"path":"/home/aniket/desk/Projects/version control system/index.js","content":"// const crypto = require('crypto'); // Use built-in crypto module for hashing\n// const fs = require(\"fs\");\n\n\n// // let versionId = 1;\n// // let rootDir = \"./\";\n\n// function isDirectory(path) {\n//     try {\n//         const stats = fs.statSync(path);\n//         return stats.isDirectory();\n//     } catch (err) {\n//         // Handle potential errors (e.g., path doesn't exist)\n//         return false; // Or throw an error if desired\n//     }\n// }\n\n// function getFilesSync(directoryPath) {\n//     const files = fs.readdirSync(directoryPath); // Get list of filenames\n//     const fileDetails = [];\n\n//     for (const filename of files) {\n//         const filePath = `${directoryPath}${filename}`; // Construct full path\n//         if (isDirectory(filePath)) {\n//             const innerFiles = getFilesSync(`${filePath}/`);\n//             fileDetails.push(...innerFiles);\n//         }\n//         else {\n//             const content = fs.readFileSync(filePath, 'utf8'); // Read file content\n//             fileDetails.push({ path: filePath, content }); // Store name and content\n//         }\n//     }\n//     return fileDetails;\n// }\n\n// class Witness {\n//     constructor() {\n//         fs.mkdir(`.witness`, (err) => {\n//             if (err) {\n//                 console.error('Error creating directory:', err);\n//             } else {\n//                 console.log('Directory created successfully!');\n//             }\n//         });\n//         fs.mkdir(`.witness/objects`, (err) => {\n//             if (err) {\n//                 console.error('Error creating directory:', err);\n//             } else {\n//                 console.log('Directory created successfully!');\n//             }\n//         })\n//         this.rootDir = `${__dirname}/`;\n//         this.versionId = 0;\n//     }\n// }\n\n\n\n\n\n// // Define a class to represent a Blob object\n// class Blob extends Witness {\n//     constructor(content) {\n//         this.content = content;\n//         this.hash = this.calculateHash();\n//         fs.writeFile(`${super.rootDir}/.witness/objects/${this.hash}`, content, (err) => {\n//             if (err) {\n//                 console.error('Error creating file:', err);\n//             } else {\n//                 console.log('File created successfully!');\n//             }\n//         });\n//     }\n\n//     calculateHash() {\n//         const hash = crypto.createHash('sha1').update(this.content).digest('hex');\n//         return hash;\n//     }\n// }\n\n// // Define a class to represent a Tree object\n// class Tree extends Witness{\n//     files = []\n//     fileMap = {}\n//     constructor(directory) {\n//         this.files = getFilesSync(directory);\n//         this.files.forEach(element => {\n//             // const blob = new Blob(element.content);\n//             const hash = crypto.createHash('sha1').update(element.content).digest('hex');\n//             this.fileMap[element.path] = hash;\n//             if (!fs.existsSync(`${super.rootDir}/.witness/objects/${hash}`)) {\n//                 const blob = new Blob(element.content);\n//             }\n//         });\n//     }\n\n\n\n//     addFile(filename, content) {\n//         const blob = new Blob(content);\n//         this.entries[filename] = blob.hash;\n//     }\n\n\n// }\n\n// // Define a class to represent a Commit object\n// class Commit extends Witness{\n//     constructor(message, author) {\n//         super.versionId++;\n//         this.vId = super.versionId;\n//         // this.treeHead = new Tree();\n//         this.message = message;\n//         this.author = author;\n//         this.timestamp = Date.now();\n//         this.tree = new Tree(super.rootDir); // Will be assigned a Tree object later\n\n\n//     }\n// }\n\n// function initiate() {\n//     console.log(\"hehe\");\n//     if (fs.existsSync(`${__dirname}/.witness`)) {\n//         console.log(\"witness has already been activated !\")\n//         return;\n//     }\n//     const witness = new Witness();//initializing witness\n//     console.log(witness);\n// }\n\n// function commit(msg, author) {\n//     const commit2 = new Commit(msg, author);\n//     console.log(commit2);\n// }\n\n\n// module.exports = initiate;\n\n\n// // console.log(commit);\n\n\n\n\n\n"},{"path":"/home/aniket/desk/Projects/version control system/node_modules//.package-lock.json","content":"{\n  \"name\": \"version-control-system\",\n  \"version\": \"1.0.0\",\n  \"lockfileVersion\": 3,\n  \"requires\": true,\n  \"packages\": {\n    \"node_modules/crypto\": {\n      \"version\": \"1.0.1\",\n      \"resolved\": \"https://registry.npmjs.org/crypto/-/crypto-1.0.1.tgz\",\n      \"integrity\": \"sha512-VxBKmeNcqQdiUQUW2Tzq0t377b54N2bMtXO/qiLa+6eRRmmC4qT3D4OnTGoT/U6O9aklQ/jTwbOtRMTTY8G0Ig==\",\n      \"deprecated\": \"This package is no longer supported. It's now a built-in Node module. If you've depended on crypto, you should switch to the one that's built-in.\"\n    }\n  }\n}\n"},{"path":"/home/aniket/desk/Projects/version control system/node_modules//crypto//README.md","content":"# Deprecated Package\n\nThis package is no longer supported and has been deprecated. To avoid malicious use, npm is hanging on to the package name.\n\nIt's now a built-in Node module. If you've depended on crypto, you should switch to the one that's built-in.\n\nPlease contact support@npmjs.com if you have questions about this package.\n"},{"path":"/home/aniket/desk/Projects/version control system/node_modules//crypto//package.json","content":"{\n  \"name\": \"crypto\",\n  \"version\": \"1.0.1\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/npm/deprecate-holder.git\"\n  },\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"bugs\": {\n    \"url\": \"https://github.com/npm/deprecate-holder/issues\"\n  },\n  \"homepage\": \"https://github.com/npm/deprecate-holder#readme\"\n}\n"},{"path":"/home/aniket/desk/Projects/version control system/package-lock.json","content":"{\n  \"name\": \"version-control-system\",\n  \"version\": \"1.0.0\",\n  \"lockfileVersion\": 3,\n  \"requires\": true,\n  \"packages\": {\n    \"\": {\n      \"name\": \"version-control-system\",\n      \"version\": \"1.0.0\",\n      \"license\": \"ISC\",\n      \"dependencies\": {\n        \"crypto\": \"^1.0.1\"\n      }\n    },\n    \"node_modules/crypto\": {\n      \"version\": \"1.0.1\",\n      \"resolved\": \"https://registry.npmjs.org/crypto/-/crypto-1.0.1.tgz\",\n      \"integrity\": \"sha512-VxBKmeNcqQdiUQUW2Tzq0t377b54N2bMtXO/qiLa+6eRRmmC4qT3D4OnTGoT/U6O9aklQ/jTwbOtRMTTY8G0Ig==\",\n      \"deprecated\": \"This package is no longer supported. It's now a built-in Node module. If you've depended on crypto, you should switch to the one that's built-in.\"\n    }\n  }\n}\n"},{"path":"/home/aniket/desk/Projects/version control system/package.json","content":"{\n  \"name\": \"version-control-system\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"type\": \"module\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"author\": \"aniket pandey\",\n  \"license\": \"ISC\",\n  \"dependencies\": {\n    \"crypto\": \"^1.0.1\"\n  }\n}\n"},{"path":"/home/aniket/desk/Projects/version control system/utils//utilities.js","content":"// const fs = require(\"fs\");\nimport { cwd } from 'process';\nimport CustomError from \"../classes/CustomError.js\";\nimport { statSync, readdirSync, readFileSync, accessSync, constants, writeFileSync } from \"fs\";\nimport path from 'path';\n\nexport function isDirectory(path) {\n    try {\n        const stats = statSync(path);\n        return stats.isDirectory();\n    } catch (err) {\n        // Handle potential errors (e.g., path doesn't exist)\n        return false; // Or throw an error if desired\n    }\n}\n\n\nexport function getFilesSync(directoryPath) {\n    try {\n        const files = readdirSync(directoryPath); // Get list of filenames\n        const fileDetails = [];\n    \n        for (const filename of files) {\n            if(filename===\".witness\"){\n                continue;\n            }\n            const filePath = `${directoryPath}/${filename}`; // Construct full path\n            if (isDirectory(filePath)) {\n                const innerFiles = getFilesSync(`${filePath}/`);\n                fileDetails.push(...innerFiles);\n            }\n            else {\n                const content = readFileSync(filePath, 'utf8'); // Read file content\n                fileDetails.push({ path: filePath, content }); // Store name and content\n            }\n        }\n        return fileDetails;\n        \n    } catch (error) {\n        console.log(\"error in getFilesSync: \", error);\n    }\n}\n\n\nexport function getInitiateObj(path){\n    try {\n        const initiateStr = readFileSync(path, 'utf-8');\n        const initiateObj = JSON.parse(initiateStr);\n        console.log(`the InitiateObj is: ${initiateObj}`);\n        return initiateObj;\n    } catch (error) {\n        console.log(`error while reading InitiateObj: ${error}`);\n    }\n}\n\nexport function getCommitHistory(path){\n    try {\n        const historyStr = readFileSync(path, 'utf-8');\n        const historyObj = JSON.parse(historyStr);\n        return historyObj;\n    } catch (error) {\n        console.log(\"error in getting commit history: \", error);\n    }\n}\n\nexport function insertCommit(commitObj){\n    try {\n        const root = commitObj.rootDir;\n        const commitHistory = getCommitHistory(`${root}/.witness/commitHistory.json`);\n        commitHistory.push(commitObj);\n        writeFileSync(`${root}/.witness/commitHistory.json`,JSON.stringify(commitHistory));\n        return commitHistory;\n    } catch (error) {\n        console.log(\"error in inserting new commit in history: \", error);\n    }\n}\n\nexport function findWitnessRoot(currentDir) {\n    try {\n        console.log(\"inside findWitnessRoot, currentDir is: \" ,currentDir);\n        // const currentDir = cwd();\n        if(accessSync(`${currentDir}/.witness`, constants.F_OK) === undefined){\n            return currentDir;\n        }\n        else if(currentDir === \"/\"){\n            throw new CustomError(\".witness directory not found!!\")\n        }\n        else return findWitnessRoot(path.dirname(currentDir))\n    } catch (error) {\n        console.log(\"error in finding .Witness directory\",error);\n    }\n  }\n\n\n\n\n  // Example usage\n  const currentPath = process.cwd();"}],"fileMap":{"/home/aniket/desk/Projects/version control system/classes//Blob.js":"46649e08812b8e8cbb185c2f672b5900bee682e9","/home/aniket/desk/Projects/version control system/classes//Commit.js":"a41e8fe0f100d39cb508b53303ef045dd4984cdb","/home/aniket/desk/Projects/version control system/classes//CustomError.js":"92ed2e18fc71d78f74121e15c6d8e05d11bc9c6c","/home/aniket/desk/Projects/version control system/classes//Tree.js":"ea5d8a2a1ef2a071b63b82eda40ff6e088e3a453","/home/aniket/desk/Projects/version control system/classes//Witness.js":"33502d5ca0dcf022772b7917fb9a43404587091b","/home/aniket/desk/Projects/version control system/commands//commit.js":"5320ab5f718e6efde5d8c9ff56ec38abedd5fb3e","/home/aniket/desk/Projects/version control system/commands//initiate.js":"5082a006125e3321695f8028bd47245887ed347a","/home/aniket/desk/Projects/version control system/hehe.cpp":"50377f4229a6731053971c84076f7918f1d59cbd","/home/aniket/desk/Projects/version control system/index.js":"70f6c9d7d4b85176b7ba17ff6981a0348d6e0b09","/home/aniket/desk/Projects/version control system/node_modules//.package-lock.json":"12cdd4150943a93e0de79a933481a461a0984d3e","/home/aniket/desk/Projects/version control system/node_modules//crypto//README.md":"db31576d2541b2711331f43fec5f386365b48804","/home/aniket/desk/Projects/version control system/node_modules//crypto//package.json":"815f5deb5efafe119152c2f0d67f35359a1e9fb9","/home/aniket/desk/Projects/version control system/package-lock.json":"d03daad4a8980f371d606c9a412c01ab949404a1","/home/aniket/desk/Projects/version control system/package.json":"f0f4c7c0f675d4a4deb66d3b8787d5f1b96429a4","/home/aniket/desk/Projects/version control system/utils//utilities.js":"2723bb8b4dd2d683fe4f3aa0627952372861cc16"}}},{"rootDir":"/home/aniket/desk/Projects/version control system","message":"msg from argument","author":"author from argument","timestamp":1712209920128,"tree":{"files":[{"path":"/home/aniket/desk/Projects/version control system/classes//Blob.js","content":"import { createHash } from 'crypto';\nimport { writeFileSync } from \"fs\";\nimport { cwd } from 'process';\nimport Witness from \"./Witness.js\";\nimport { getInitiateObj as _getInitiateObj,findWitnessRoot } from \"../utils/utilities.js\";\nconst getInitiateObj = _getInitiateObj;\n\nconst currentDir = cwd();\n\nexport default class Blob{\n    constructor(content) {\n        try {\n            const rootDir = findWitnessRoot(currentDir);\n            const initObject = getInitiateObj(`${rootDir}/.witness/initiateObj.json`)\n    \n            this.content = content;\n            this.hash = this.calculateHash();\n            writeFileSync(`${initObject.rootDir}/.witness/objects/${this.hash}`, content);\n            \n        } catch (error) {\n            console.log(\"error in creating Blobs: \", error);\n        }\n    }\n\n    calculateHash() {\n        const hash = createHash('sha1').update(this.content).digest('hex');\n        return hash;\n    }\n}"},{"path":"/home/aniket/desk/Projects/version control system/classes//Commit.js","content":"import fs from \"fs\";\nimport Witness from \"./Witness.js\";\nimport Tree from \"./Tree.js\";\nimport CustomError from \"./CustomError.js\";\nimport { cwd } from 'process';\nimport { getInitiateObj as _getInitiateObj, findWitnessRoot} from \"../utils/utilities.js\";\nconst getInitiateObj = _getInitiateObj;\n\nconst currentDir = cwd();\n\nexport default class Commit{\n    constructor(message, author) {\n        try {\n            this.rootDir = findWitnessRoot(currentDir);\n            // const initObject = getInitiateObj(`${rootDir}/.witness/initiateObj`)\n            // initObject.versionId++;\n            // this.vId = initObject.versionId;\n            this.message = message;\n            this.author = author;\n            this.timestamp = Date.now();\n            this.tree = new Tree(this.rootDir); // Will be assigned a Tree object later\n            \n        } catch (error) {\n            console.log(\"error in creating Commit Object: \", error);            \n        }\n\n\n    }\n}"},{"path":"/home/aniket/desk/Projects/version control system/classes//CustomError.js","content":"export default class CustomError extends Error {\n    constructor(message) {\n      super(message);\n      this.name = \"MyCustomError\";\n    }\n  }"},{"path":"/home/aniket/desk/Projects/version control system/classes//Tree.js","content":"import { createHash } from 'crypto';\nimport { existsSync } from \"fs\";\nimport Witness from \"./Witness.js\";\nimport Blob from './Blob.js';\nimport { getInitiateObj as _getInitiateObj,getFilesSync } from \"../utils/utilities.js\";\nconst getInitiateObj = _getInitiateObj;\nimport path from 'path';\n\nexport default class Tree{\n    files = []\n    fileMap = {}\n    constructor(directory) {\n        try {\n            this.files = getFilesSync(directory);\n            this.files.forEach(element => {\n                // const blob = new Blob(element.content);\n                const hash = createHash('sha1').update(element.content).digest('hex');\n                this.fileMap[element.path] = hash;\n                if (!existsSync(`${directory}/.witness/objects/${hash}`)) {\n                    const blob = new Blob(element.content);\n                }\n            });\n            \n        } catch (error) {\n            console.log(\"error in creating Tree Object: \", error);\n        }\n    }\n\n\n\n    addFile(filename, content) {\n        const blob = new Blob(content);\n        this.entries[filename] = blob.hash;\n    }\n\n\n}"},{"path":"/home/aniket/desk/Projects/version control system/classes//Witness.js","content":"import { mkdirSync } from \"fs\";\n\nexport default class Witness {\n    constructor(dir) {\n        try {\n            mkdirSync(`.witness`);\n            mkdirSync(`.witness/objects`);\n            \n        } catch (error) {\n            console.error('Error creating directory:', error);    \n        }\n\n        this.rootDir = `${dir}/`;\n        this.versionId = 0;\n    }\n}\n"},{"path":"/home/aniket/desk/Projects/version control system/commands//commit.js","content":"import fs from \"fs\";\nimport Commit from \"../classes/Commit.js\";\nimport { getInitiateObj as _getInitiateObj, findWitnessRoot, getCommitHistory, insertCommit } from \"../utils/utilities.js\";\nimport { cwd } from 'process';\n\nfunction commit(msg, author) {\n\n\n    try {\n        const currentDir = cwd();\n\n        const commit = new Commit(msg, author);\n        console.log(commit);\n\n        insertCommit(commit);\n        const commitHistory = getCommitHistory(`${currentDir}/.witness/commitHistory.json`);\n\n        console.log(\"commit histoy is: \", commitHistory);\n    } catch (error) {\n        console.log(error);\n    }\n\n\n}\n\ncommit(\"msg from argument\", \"author from argument\");"},{"path":"/home/aniket/desk/Projects/version control system/commands//initiate.js","content":"import { existsSync, writeFileSync } from \"fs\";\n// const initiate = require(\"..\");\nimport Witness from \"../classes/Witness.js\";\nimport { cwd } from 'process';\nimport { getInitiateObj as _getInitiateObj } from \"../utils/utilities.js\";\nconst getInitiateObj = _getInitiateObj;\n\nfunction initiate() {\n\n    const currentDir = cwd();\n\n    console.log(currentDir);\n    if (existsSync(`${currentDir}/.witness`)) {\n        console.log(\"witness has already been activated !\")\n        return;\n    }\n    const witness = new Witness(currentDir);//initializing witness\n\n    const commitHistory = [];\n\n\n\n\n    try {\n        writeFileSync(`${currentDir}/.witness/initiateObj.json`, JSON.stringify(witness));\n        console.log('initiateObj created successfully!');\n\n        writeFileSync(`${currentDir}/.witness/commitHistory.json`, JSON.stringify(commitHistory));\n        console.log('commitHistory created successfully!');\n        \n    } catch (error) {\n        console.error('Error creating initial files: ', error);\n        \n    }\n    \n    \n\n    const initObj = getInitiateObj(`${currentDir}/.witness/initiateObj.json`);\n\n    console.log(initObj);\n}\n\ninitiate();"},{"path":"/home/aniket/desk/Projects/version control system/hehe.cpp","content":"#include <iostream>\n#include <string>\n#include <unordered_map>\n#include <vector>\n#include <sstream>\n#include <crypto++/sha.h> // Include a cryptographic library for hashing\n\nusing namespace std;\nusing namespace CryptoPP;\n\n// Define a struct to represent a Blob object\nstruct Blob {\n  string content;\n  string hash;\n\n  // Calculate SHA-1 hash of the blob content\n  void calculateHash() {\n    SHA sha;\n    byte digest[SHA::DIGESTSIZE];\n    sha.CalculateDigest(digest, (const byte*)content.data(), content.size());\n    stringstream ss;\n    for (int i = 0; i < SHA::DIGESTSIZE; ++i) {\n      ss << hex << setw(2) << setfill('0') << (int)digest[i];\n    }\n    hash = ss.str();\n  }\n};\n\n// Define a struct to represent a Tree object\nstruct Tree {\n  unordered_map<string, string> entries; // Map of filename -> Blob hash\n\n  // Add a file (Blob) to the tree\n  void addFile(const string& filename, const Blob& blob) {\n    entries[filename] = blob.hash;\n  }\n};\n\n// Define a struct to represent a Commit object\nstruct Commit {\n  string message;\n  string author;\n  time_t timestamp;\n  Tree* tree; // Pointer to the referenced Tree object\n\n  // Constructor with basic details\n  Commit(const string& msg, const string& auth) : message(msg), author(auth), timestamp(time(nullptr)) {}\n};\n\nint main() {\n  // Create some Blobs (simulating files)\n  Blob blob1;\n  blob1.content = \"This is the content of file1.txt\";\n  blob1.calculateHash();\n\n  Blob blob2;\n  blob2.content = \"This is the content of file2.txt\";\n  blob2.calculateHash();\n\n  // Create a Tree with the Blobs\n  Tree tree;\n  tree.addFile(\"file1.txt\", blob1);\n  tree.addFile(\"file2.txt\", blob2);\n\n  // Create a Commit referencing the Tree\n  Commit commit(\"Initial commit\", \"John Doe\");\n  commit.tree = &tree;\n\n  // Simulate storing Blobs and Commit (not implemented here, would involve data structures)\n  cout << \"Blob1 hash: \" << blob1.hash << endl;\n  cout << \"Blob2 hash: \" << blob2.hash << endl;\n  cout << \"Commit message: \" << commit.message << endl;\n\n  return 0;\n}"},{"path":"/home/aniket/desk/Projects/version control system/index.js","content":"// const crypto = require('crypto'); // Use built-in crypto module for hashing\n// const fs = require(\"fs\");\n\n\n// // let versionId = 1;\n// // let rootDir = \"./\";\n\n// function isDirectory(path) {\n//     try {\n//         const stats = fs.statSync(path);\n//         return stats.isDirectory();\n//     } catch (err) {\n//         // Handle potential errors (e.g., path doesn't exist)\n//         return false; // Or throw an error if desired\n//     }\n// }\n\n// function getFilesSync(directoryPath) {\n//     const files = fs.readdirSync(directoryPath); // Get list of filenames\n//     const fileDetails = [];\n\n//     for (const filename of files) {\n//         const filePath = `${directoryPath}${filename}`; // Construct full path\n//         if (isDirectory(filePath)) {\n//             const innerFiles = getFilesSync(`${filePath}/`);\n//             fileDetails.push(...innerFiles);\n//         }\n//         else {\n//             const content = fs.readFileSync(filePath, 'utf8'); // Read file content\n//             fileDetails.push({ path: filePath, content }); // Store name and content\n//         }\n//     }\n//     return fileDetails;\n// }\n\n// class Witness {\n//     constructor() {\n//         fs.mkdir(`.witness`, (err) => {\n//             if (err) {\n//                 console.error('Error creating directory:', err);\n//             } else {\n//                 console.log('Directory created successfully!');\n//             }\n//         });\n//         fs.mkdir(`.witness/objects`, (err) => {\n//             if (err) {\n//                 console.error('Error creating directory:', err);\n//             } else {\n//                 console.log('Directory created successfully!');\n//             }\n//         })\n//         this.rootDir = `${__dirname}/`;\n//         this.versionId = 0;\n//     }\n// }\n\n\n\n\n\n// // Define a class to represent a Blob object\n// class Blob extends Witness {\n//     constructor(content) {\n//         this.content = content;\n//         this.hash = this.calculateHash();\n//         fs.writeFile(`${super.rootDir}/.witness/objects/${this.hash}`, content, (err) => {\n//             if (err) {\n//                 console.error('Error creating file:', err);\n//             } else {\n//                 console.log('File created successfully!');\n//             }\n//         });\n//     }\n\n//     calculateHash() {\n//         const hash = crypto.createHash('sha1').update(this.content).digest('hex');\n//         return hash;\n//     }\n// }\n\n// // Define a class to represent a Tree object\n// class Tree extends Witness{\n//     files = []\n//     fileMap = {}\n//     constructor(directory) {\n//         this.files = getFilesSync(directory);\n//         this.files.forEach(element => {\n//             // const blob = new Blob(element.content);\n//             const hash = crypto.createHash('sha1').update(element.content).digest('hex');\n//             this.fileMap[element.path] = hash;\n//             if (!fs.existsSync(`${super.rootDir}/.witness/objects/${hash}`)) {\n//                 const blob = new Blob(element.content);\n//             }\n//         });\n//     }\n\n\n\n//     addFile(filename, content) {\n//         const blob = new Blob(content);\n//         this.entries[filename] = blob.hash;\n//     }\n\n\n// }\n\n// // Define a class to represent a Commit object\n// class Commit extends Witness{\n//     constructor(message, author) {\n//         super.versionId++;\n//         this.vId = super.versionId;\n//         // this.treeHead = new Tree();\n//         this.message = message;\n//         this.author = author;\n//         this.timestamp = Date.now();\n//         this.tree = new Tree(super.rootDir); // Will be assigned a Tree object later\n\n\n//     }\n// }\n\n// function initiate() {\n//     console.log(\"hehe\");\n//     if (fs.existsSync(`${__dirname}/.witness`)) {\n//         console.log(\"witness has already been activated !\")\n//         return;\n//     }\n//     const witness = new Witness();//initializing witness\n//     console.log(witness);\n// }\n\n// function commit(msg, author) {\n//     const commit2 = new Commit(msg, author);\n//     console.log(commit2);\n// }\n\n\n// module.exports = initiate;\n\n\n// // console.log(commit);\n\n\n\n\n\n"},{"path":"/home/aniket/desk/Projects/version control system/node_modules//.package-lock.json","content":"{\n  \"name\": \"version-control-system\",\n  \"version\": \"1.0.0\",\n  \"lockfileVersion\": 3,\n  \"requires\": true,\n  \"packages\": {\n    \"node_modules/crypto\": {\n      \"version\": \"1.0.1\",\n      \"resolved\": \"https://registry.npmjs.org/crypto/-/crypto-1.0.1.tgz\",\n      \"integrity\": \"sha512-VxBKmeNcqQdiUQUW2Tzq0t377b54N2bMtXO/qiLa+6eRRmmC4qT3D4OnTGoT/U6O9aklQ/jTwbOtRMTTY8G0Ig==\",\n      \"deprecated\": \"This package is no longer supported. It's now a built-in Node module. If you've depended on crypto, you should switch to the one that's built-in.\"\n    }\n  }\n}\n"},{"path":"/home/aniket/desk/Projects/version control system/node_modules//crypto//README.md","content":"# Deprecated Package\n\nThis package is no longer supported and has been deprecated. To avoid malicious use, npm is hanging on to the package name.\n\nIt's now a built-in Node module. If you've depended on crypto, you should switch to the one that's built-in.\n\nPlease contact support@npmjs.com if you have questions about this package.\n"},{"path":"/home/aniket/desk/Projects/version control system/node_modules//crypto//package.json","content":"{\n  \"name\": \"crypto\",\n  \"version\": \"1.0.1\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/npm/deprecate-holder.git\"\n  },\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"bugs\": {\n    \"url\": \"https://github.com/npm/deprecate-holder/issues\"\n  },\n  \"homepage\": \"https://github.com/npm/deprecate-holder#readme\"\n}\n"},{"path":"/home/aniket/desk/Projects/version control system/package-lock.json","content":"{\n  \"name\": \"version-control-system\",\n  \"version\": \"1.0.0\",\n  \"lockfileVersion\": 3,\n  \"requires\": true,\n  \"packages\": {\n    \"\": {\n      \"name\": \"version-control-system\",\n      \"version\": \"1.0.0\",\n      \"license\": \"ISC\",\n      \"dependencies\": {\n        \"crypto\": \"^1.0.1\"\n      }\n    },\n    \"node_modules/crypto\": {\n      \"version\": \"1.0.1\",\n      \"resolved\": \"https://registry.npmjs.org/crypto/-/crypto-1.0.1.tgz\",\n      \"integrity\": \"sha512-VxBKmeNcqQdiUQUW2Tzq0t377b54N2bMtXO/qiLa+6eRRmmC4qT3D4OnTGoT/U6O9aklQ/jTwbOtRMTTY8G0Ig==\",\n      \"deprecated\": \"This package is no longer supported. It's now a built-in Node module. If you've depended on crypto, you should switch to the one that's built-in.\"\n    }\n  }\n}\n"},{"path":"/home/aniket/desk/Projects/version control system/package.json","content":"{\n  \"name\": \"version-control-system\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"type\": \"module\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"author\": \"aniket pandey\",\n  \"license\": \"ISC\",\n  \"dependencies\": {\n    \"crypto\": \"^1.0.1\"\n  }\n}\n"},{"path":"/home/aniket/desk/Projects/version control system/utils//utilities.js","content":"// const fs = require(\"fs\");\nimport { cwd } from 'process';\nimport CustomError from \"../classes/CustomError.js\";\nimport { statSync, readdirSync, readFileSync, accessSync, constants, writeFileSync } from \"fs\";\nimport path from 'path';\n\nexport function isDirectory(path) {\n    try {\n        const stats = statSync(path);\n        return stats.isDirectory();\n    } catch (err) {\n        // Handle potential errors (e.g., path doesn't exist)\n        return false; // Or throw an error if desired\n    }\n}\n\n\nexport function getFilesSync(directoryPath) {\n    try {\n        const files = readdirSync(directoryPath); // Get list of filenames\n        const fileDetails = [];\n    \n        for (const filename of files) {\n            if(filename===\".witness\"){\n                continue;\n            }\n            const filePath = `${directoryPath}/${filename}`; // Construct full path\n            if (isDirectory(filePath)) {\n                const innerFiles = getFilesSync(`${filePath}/`);\n                fileDetails.push(...innerFiles);\n            }\n            else {\n                const content = readFileSync(filePath, 'utf8'); // Read file content\n                fileDetails.push({ path: filePath, content }); // Store name and content\n            }\n        }\n        return fileDetails;\n        \n    } catch (error) {\n        console.log(\"error in getFilesSync: \", error);\n    }\n}\n\n\nexport function getInitiateObj(path){\n    try {\n        const initiateStr = readFileSync(path, 'utf-8');\n        const initiateObj = JSON.parse(initiateStr);\n        console.log(`the InitiateObj is: ${initiateObj}`);\n        return initiateObj;\n    } catch (error) {\n        console.log(`error while reading InitiateObj: ${error}`);\n    }\n}\n\nexport function getCommitHistory(path){\n    try {\n        const historyStr = readFileSync(path, 'utf-8');\n        const historyObj = JSON.parse(historyStr);\n        return historyObj;\n    } catch (error) {\n        console.log(\"error in getting commit history: \", error);\n    }\n}\n\nexport function insertCommit(commitObj){\n    try {\n        const root = commitObj.rootDir;\n        const commitHistory = getCommitHistory(`${root}/.witness/commitHistory.json`);\n        commitHistory.push(commitObj);\n        writeFileSync(`${root}/.witness/commitHistory.json`,JSON.stringify(commitHistory));\n        return commitHistory;\n    } catch (error) {\n        console.log(\"error in inserting new commit in history: \", error);\n    }\n}\n\nexport function findWitnessRoot(currentDir) {\n    try {\n        console.log(\"inside findWitnessRoot, currentDir is: \" ,currentDir);\n        // const currentDir = cwd();\n        if(accessSync(`${currentDir}/.witness`, constants.F_OK) === undefined){\n            return currentDir;\n        }\n        else if(currentDir === \"/\"){\n            throw new CustomError(\".witness directory not found!!\")\n        }\n        else return findWitnessRoot(path.dirname(currentDir))\n    } catch (error) {\n        console.log(\"error in finding .Witness directory\",error);\n    }\n  }\n\n\n\n\n  // Example usage\n  const currentPath = process.cwd();"}],"fileMap":{"/home/aniket/desk/Projects/version control system/classes//Blob.js":"46649e08812b8e8cbb185c2f672b5900bee682e9","/home/aniket/desk/Projects/version control system/classes//Commit.js":"a41e8fe0f100d39cb508b53303ef045dd4984cdb","/home/aniket/desk/Projects/version control system/classes//CustomError.js":"92ed2e18fc71d78f74121e15c6d8e05d11bc9c6c","/home/aniket/desk/Projects/version control system/classes//Tree.js":"ea5d8a2a1ef2a071b63b82eda40ff6e088e3a453","/home/aniket/desk/Projects/version control system/classes//Witness.js":"33502d5ca0dcf022772b7917fb9a43404587091b","/home/aniket/desk/Projects/version control system/commands//commit.js":"5be5a5f72da66d36972718d06657e69d78809879","/home/aniket/desk/Projects/version control system/commands//initiate.js":"5082a006125e3321695f8028bd47245887ed347a","/home/aniket/desk/Projects/version control system/hehe.cpp":"50377f4229a6731053971c84076f7918f1d59cbd","/home/aniket/desk/Projects/version control system/index.js":"70f6c9d7d4b85176b7ba17ff6981a0348d6e0b09","/home/aniket/desk/Projects/version control system/node_modules//.package-lock.json":"12cdd4150943a93e0de79a933481a461a0984d3e","/home/aniket/desk/Projects/version control system/node_modules//crypto//README.md":"db31576d2541b2711331f43fec5f386365b48804","/home/aniket/desk/Projects/version control system/node_modules//crypto//package.json":"815f5deb5efafe119152c2f0d67f35359a1e9fb9","/home/aniket/desk/Projects/version control system/package-lock.json":"d03daad4a8980f371d606c9a412c01ab949404a1","/home/aniket/desk/Projects/version control system/package.json":"f0f4c7c0f675d4a4deb66d3b8787d5f1b96429a4","/home/aniket/desk/Projects/version control system/utils//utilities.js":"2723bb8b4dd2d683fe4f3aa0627952372861cc16"}}},{"rootDir":"/home/aniket/desk/Projects/version control system","message":"msg from argument","author":"author from argument","timestamp":1712210000855,"tree":{"files":[{"path":"/home/aniket/desk/Projects/version control system/classes//Blob.js","content":"import { createHash } from 'crypto';\nimport { writeFileSync } from \"fs\";\nimport { cwd } from 'process';\nimport Witness from \"./Witness.js\";\nimport { getInitiateObj as _getInitiateObj,findWitnessRoot } from \"../utils/utilities.js\";\nconst getInitiateObj = _getInitiateObj;\n\nconst currentDir = cwd();\n\nexport default class Blob{\n    constructor(content) {\n        try {\n            const rootDir = findWitnessRoot(currentDir);\n            const initObject = getInitiateObj(`${rootDir}/.witness/initiateObj.json`)\n    \n            this.content = content;\n            this.hash = this.calculateHash();\n            writeFileSync(`${initObject.rootDir}/.witness/objects/${this.hash}`, content);\n            \n        } catch (error) {\n            console.log(\"error in creating Blobs: \", error);\n        }\n    }\n\n    calculateHash() {\n        const hash = createHash('sha1').update(this.content).digest('hex');\n        return hash;\n    }\n}"},{"path":"/home/aniket/desk/Projects/version control system/classes//Commit.js","content":"import fs from \"fs\";\nimport Witness from \"./Witness.js\";\nimport Tree from \"./Tree.js\";\nimport CustomError from \"./CustomError.js\";\nimport { cwd } from 'process';\nimport { getInitiateObj as _getInitiateObj, findWitnessRoot} from \"../utils/utilities.js\";\nconst getInitiateObj = _getInitiateObj;\n\nconst currentDir = cwd();\n\nexport default class Commit{\n    constructor(message, author) {\n        try {\n            this.rootDir = findWitnessRoot(currentDir);\n            // const initObject = getInitiateObj(`${rootDir}/.witness/initiateObj`)\n            // initObject.versionId++;\n            // this.vId = initObject.versionId;\n            this.message = message;\n            this.author = author;\n            this.timestamp = Date.now();\n            this.tree = new Tree(this.rootDir); // Will be assigned a Tree object later\n            \n        } catch (error) {\n            console.log(\"error in creating Commit Object: \", error);            \n        }\n\n\n    }\n}"},{"path":"/home/aniket/desk/Projects/version control system/classes//CustomError.js","content":"export default class CustomError extends Error {\n    constructor(message) {\n      super(message);\n      this.name = \"MyCustomError\";\n    }\n  }"},{"path":"/home/aniket/desk/Projects/version control system/classes//Tree.js","content":"import { createHash } from 'crypto';\nimport { existsSync } from \"fs\";\nimport Witness from \"./Witness.js\";\nimport Blob from './Blob.js';\nimport { getInitiateObj as _getInitiateObj,getFilesSync } from \"../utils/utilities.js\";\nconst getInitiateObj = _getInitiateObj;\nimport path from 'path';\n\nexport default class Tree{\n    files = []\n    fileMap = {}\n    constructor(directory) {\n        try {\n            this.files = getFilesSync(directory);\n            this.files.forEach(element => {\n                // const blob = new Blob(element.content);\n                const hash = createHash('sha1').update(element.content).digest('hex');\n                this.fileMap[element.path] = hash;\n                if (!existsSync(`${directory}/.witness/objects/${hash}`)) {\n                    const blob = new Blob(element.content);\n                }\n            });\n            \n        } catch (error) {\n            console.log(\"error in creating Tree Object: \", error);\n        }\n    }\n\n\n\n    addFile(filename, content) {\n        const blob = new Blob(content);\n        this.entries[filename] = blob.hash;\n    }\n\n\n}"},{"path":"/home/aniket/desk/Projects/version control system/classes//Witness.js","content":"import { mkdirSync } from \"fs\";\n\nexport default class Witness {\n    constructor(dir) {\n        try {\n            mkdirSync(`.witness`);\n            mkdirSync(`.witness/objects`);\n            \n        } catch (error) {\n            console.error('Error creating directory:', error);    \n        }\n\n        this.rootDir = `${dir}/`;\n        this.versionId = 0;\n    }\n}\n"},{"path":"/home/aniket/desk/Projects/version control system/commands//commit.js","content":"import fs from \"fs\";\nimport Commit from \"../classes/Commit.js\";\nimport { getInitiateObj as _getInitiateObj, findWitnessRoot, getCommitHistory, insertCommit } from \"../utils/utilities.js\";\nimport { cwd } from 'process';\n\nfunction commit(msg, author) {\n\n\n    try {\n        const currentDir = cwd();\n\n        const commit = new Commit(msg, author);\n        console.log(commit);\n\n        insertCommit(commit);\n        const commitHistory = getCommitHistory(`${currentDir}/.witness/commitHistory.json`);\n\n        console.log(\"commit histoy is: \", commitHistory.timestamp);\n    } catch (error) {\n        console.log(error);\n    }\n\n\n}\n\ncommit(\"msg from argument\", \"author from argument\");"},{"path":"/home/aniket/desk/Projects/version control system/commands//initiate.js","content":"import { existsSync, writeFileSync } from \"fs\";\n// const initiate = require(\"..\");\nimport Witness from \"../classes/Witness.js\";\nimport { cwd } from 'process';\nimport { getInitiateObj as _getInitiateObj } from \"../utils/utilities.js\";\nconst getInitiateObj = _getInitiateObj;\n\nfunction initiate() {\n\n    const currentDir = cwd();\n\n    console.log(currentDir);\n    if (existsSync(`${currentDir}/.witness`)) {\n        console.log(\"witness has already been activated !\")\n        return;\n    }\n    const witness = new Witness(currentDir);//initializing witness\n\n    const commitHistory = [];\n\n\n\n\n    try {\n        writeFileSync(`${currentDir}/.witness/initiateObj.json`, JSON.stringify(witness));\n        console.log('initiateObj created successfully!');\n\n        writeFileSync(`${currentDir}/.witness/commitHistory.json`, JSON.stringify(commitHistory));\n        console.log('commitHistory created successfully!');\n        \n    } catch (error) {\n        console.error('Error creating initial files: ', error);\n        \n    }\n    \n    \n\n    const initObj = getInitiateObj(`${currentDir}/.witness/initiateObj.json`);\n\n    console.log(initObj);\n}\n\ninitiate();"},{"path":"/home/aniket/desk/Projects/version control system/hehe.cpp","content":"#include <iostream>\n#include <string>\n#include <unordered_map>\n#include <vector>\n#include <sstream>\n#include <crypto++/sha.h> // Include a cryptographic library for hashing\n\nusing namespace std;\nusing namespace CryptoPP;\n\n// Define a struct to represent a Blob object\nstruct Blob {\n  string content;\n  string hash;\n\n  // Calculate SHA-1 hash of the blob content\n  void calculateHash() {\n    SHA sha;\n    byte digest[SHA::DIGESTSIZE];\n    sha.CalculateDigest(digest, (const byte*)content.data(), content.size());\n    stringstream ss;\n    for (int i = 0; i < SHA::DIGESTSIZE; ++i) {\n      ss << hex << setw(2) << setfill('0') << (int)digest[i];\n    }\n    hash = ss.str();\n  }\n};\n\n// Define a struct to represent a Tree object\nstruct Tree {\n  unordered_map<string, string> entries; // Map of filename -> Blob hash\n\n  // Add a file (Blob) to the tree\n  void addFile(const string& filename, const Blob& blob) {\n    entries[filename] = blob.hash;\n  }\n};\n\n// Define a struct to represent a Commit object\nstruct Commit {\n  string message;\n  string author;\n  time_t timestamp;\n  Tree* tree; // Pointer to the referenced Tree object\n\n  // Constructor with basic details\n  Commit(const string& msg, const string& auth) : message(msg), author(auth), timestamp(time(nullptr)) {}\n};\n\nint main() {\n  // Create some Blobs (simulating files)\n  Blob blob1;\n  blob1.content = \"This is the content of file1.txt\";\n  blob1.calculateHash();\n\n  Blob blob2;\n  blob2.content = \"This is the content of file2.txt\";\n  blob2.calculateHash();\n\n  // Create a Tree with the Blobs\n  Tree tree;\n  tree.addFile(\"file1.txt\", blob1);\n  tree.addFile(\"file2.txt\", blob2);\n\n  // Create a Commit referencing the Tree\n  Commit commit(\"Initial commit\", \"John Doe\");\n  commit.tree = &tree;\n\n  // Simulate storing Blobs and Commit (not implemented here, would involve data structures)\n  cout << \"Blob1 hash: \" << blob1.hash << endl;\n  cout << \"Blob2 hash: \" << blob2.hash << endl;\n  cout << \"Commit message: \" << commit.message << endl;\n\n  return 0;\n}"},{"path":"/home/aniket/desk/Projects/version control system/index.js","content":"// const crypto = require('crypto'); // Use built-in crypto module for hashing\n// const fs = require(\"fs\");\n\n\n// // let versionId = 1;\n// // let rootDir = \"./\";\n\n// function isDirectory(path) {\n//     try {\n//         const stats = fs.statSync(path);\n//         return stats.isDirectory();\n//     } catch (err) {\n//         // Handle potential errors (e.g., path doesn't exist)\n//         return false; // Or throw an error if desired\n//     }\n// }\n\n// function getFilesSync(directoryPath) {\n//     const files = fs.readdirSync(directoryPath); // Get list of filenames\n//     const fileDetails = [];\n\n//     for (const filename of files) {\n//         const filePath = `${directoryPath}${filename}`; // Construct full path\n//         if (isDirectory(filePath)) {\n//             const innerFiles = getFilesSync(`${filePath}/`);\n//             fileDetails.push(...innerFiles);\n//         }\n//         else {\n//             const content = fs.readFileSync(filePath, 'utf8'); // Read file content\n//             fileDetails.push({ path: filePath, content }); // Store name and content\n//         }\n//     }\n//     return fileDetails;\n// }\n\n// class Witness {\n//     constructor() {\n//         fs.mkdir(`.witness`, (err) => {\n//             if (err) {\n//                 console.error('Error creating directory:', err);\n//             } else {\n//                 console.log('Directory created successfully!');\n//             }\n//         });\n//         fs.mkdir(`.witness/objects`, (err) => {\n//             if (err) {\n//                 console.error('Error creating directory:', err);\n//             } else {\n//                 console.log('Directory created successfully!');\n//             }\n//         })\n//         this.rootDir = `${__dirname}/`;\n//         this.versionId = 0;\n//     }\n// }\n\n\n\n\n\n// // Define a class to represent a Blob object\n// class Blob extends Witness {\n//     constructor(content) {\n//         this.content = content;\n//         this.hash = this.calculateHash();\n//         fs.writeFile(`${super.rootDir}/.witness/objects/${this.hash}`, content, (err) => {\n//             if (err) {\n//                 console.error('Error creating file:', err);\n//             } else {\n//                 console.log('File created successfully!');\n//             }\n//         });\n//     }\n\n//     calculateHash() {\n//         const hash = crypto.createHash('sha1').update(this.content).digest('hex');\n//         return hash;\n//     }\n// }\n\n// // Define a class to represent a Tree object\n// class Tree extends Witness{\n//     files = []\n//     fileMap = {}\n//     constructor(directory) {\n//         this.files = getFilesSync(directory);\n//         this.files.forEach(element => {\n//             // const blob = new Blob(element.content);\n//             const hash = crypto.createHash('sha1').update(element.content).digest('hex');\n//             this.fileMap[element.path] = hash;\n//             if (!fs.existsSync(`${super.rootDir}/.witness/objects/${hash}`)) {\n//                 const blob = new Blob(element.content);\n//             }\n//         });\n//     }\n\n\n\n//     addFile(filename, content) {\n//         const blob = new Blob(content);\n//         this.entries[filename] = blob.hash;\n//     }\n\n\n// }\n\n// // Define a class to represent a Commit object\n// class Commit extends Witness{\n//     constructor(message, author) {\n//         super.versionId++;\n//         this.vId = super.versionId;\n//         // this.treeHead = new Tree();\n//         this.message = message;\n//         this.author = author;\n//         this.timestamp = Date.now();\n//         this.tree = new Tree(super.rootDir); // Will be assigned a Tree object later\n\n\n//     }\n// }\n\n// function initiate() {\n//     console.log(\"hehe\");\n//     if (fs.existsSync(`${__dirname}/.witness`)) {\n//         console.log(\"witness has already been activated !\")\n//         return;\n//     }\n//     const witness = new Witness();//initializing witness\n//     console.log(witness);\n// }\n\n// function commit(msg, author) {\n//     const commit2 = new Commit(msg, author);\n//     console.log(commit2);\n// }\n\n\n// module.exports = initiate;\n\n\n// // console.log(commit);\n\n\n\n\n\n"},{"path":"/home/aniket/desk/Projects/version control system/node_modules//.package-lock.json","content":"{\n  \"name\": \"version-control-system\",\n  \"version\": \"1.0.0\",\n  \"lockfileVersion\": 3,\n  \"requires\": true,\n  \"packages\": {\n    \"node_modules/crypto\": {\n      \"version\": \"1.0.1\",\n      \"resolved\": \"https://registry.npmjs.org/crypto/-/crypto-1.0.1.tgz\",\n      \"integrity\": \"sha512-VxBKmeNcqQdiUQUW2Tzq0t377b54N2bMtXO/qiLa+6eRRmmC4qT3D4OnTGoT/U6O9aklQ/jTwbOtRMTTY8G0Ig==\",\n      \"deprecated\": \"This package is no longer supported. It's now a built-in Node module. If you've depended on crypto, you should switch to the one that's built-in.\"\n    }\n  }\n}\n"},{"path":"/home/aniket/desk/Projects/version control system/node_modules//crypto//README.md","content":"# Deprecated Package\n\nThis package is no longer supported and has been deprecated. To avoid malicious use, npm is hanging on to the package name.\n\nIt's now a built-in Node module. If you've depended on crypto, you should switch to the one that's built-in.\n\nPlease contact support@npmjs.com if you have questions about this package.\n"},{"path":"/home/aniket/desk/Projects/version control system/node_modules//crypto//package.json","content":"{\n  \"name\": \"crypto\",\n  \"version\": \"1.0.1\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/npm/deprecate-holder.git\"\n  },\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"bugs\": {\n    \"url\": \"https://github.com/npm/deprecate-holder/issues\"\n  },\n  \"homepage\": \"https://github.com/npm/deprecate-holder#readme\"\n}\n"},{"path":"/home/aniket/desk/Projects/version control system/package-lock.json","content":"{\n  \"name\": \"version-control-system\",\n  \"version\": \"1.0.0\",\n  \"lockfileVersion\": 3,\n  \"requires\": true,\n  \"packages\": {\n    \"\": {\n      \"name\": \"version-control-system\",\n      \"version\": \"1.0.0\",\n      \"license\": \"ISC\",\n      \"dependencies\": {\n        \"crypto\": \"^1.0.1\"\n      }\n    },\n    \"node_modules/crypto\": {\n      \"version\": \"1.0.1\",\n      \"resolved\": \"https://registry.npmjs.org/crypto/-/crypto-1.0.1.tgz\",\n      \"integrity\": \"sha512-VxBKmeNcqQdiUQUW2Tzq0t377b54N2bMtXO/qiLa+6eRRmmC4qT3D4OnTGoT/U6O9aklQ/jTwbOtRMTTY8G0Ig==\",\n      \"deprecated\": \"This package is no longer supported. It's now a built-in Node module. If you've depended on crypto, you should switch to the one that's built-in.\"\n    }\n  }\n}\n"},{"path":"/home/aniket/desk/Projects/version control system/package.json","content":"{\n  \"name\": \"version-control-system\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"type\": \"module\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"author\": \"aniket pandey\",\n  \"license\": \"ISC\",\n  \"dependencies\": {\n    \"crypto\": \"^1.0.1\"\n  }\n}\n"},{"path":"/home/aniket/desk/Projects/version control system/utils//utilities.js","content":"// const fs = require(\"fs\");\nimport { cwd } from 'process';\nimport CustomError from \"../classes/CustomError.js\";\nimport { statSync, readdirSync, readFileSync, accessSync, constants, writeFileSync } from \"fs\";\nimport path from 'path';\n\nexport function isDirectory(path) {\n    try {\n        const stats = statSync(path);\n        return stats.isDirectory();\n    } catch (err) {\n        // Handle potential errors (e.g., path doesn't exist)\n        return false; // Or throw an error if desired\n    }\n}\n\n\nexport function getFilesSync(directoryPath) {\n    try {\n        const files = readdirSync(directoryPath); // Get list of filenames\n        const fileDetails = [];\n    \n        for (const filename of files) {\n            if(filename===\".witness\"){\n                continue;\n            }\n            const filePath = `${directoryPath}/${filename}`; // Construct full path\n            if (isDirectory(filePath)) {\n                const innerFiles = getFilesSync(`${filePath}/`);\n                fileDetails.push(...innerFiles);\n            }\n            else {\n                const content = readFileSync(filePath, 'utf8'); // Read file content\n                fileDetails.push({ path: filePath, content }); // Store name and content\n            }\n        }\n        return fileDetails;\n        \n    } catch (error) {\n        console.log(\"error in getFilesSync: \", error);\n    }\n}\n\n\nexport function getInitiateObj(path){\n    try {\n        const initiateStr = readFileSync(path, 'utf-8');\n        const initiateObj = JSON.parse(initiateStr);\n        console.log(`the InitiateObj is: ${initiateObj}`);\n        return initiateObj;\n    } catch (error) {\n        console.log(`error while reading InitiateObj: ${error}`);\n    }\n}\n\nexport function getCommitHistory(path){\n    try {\n        const historyStr = readFileSync(path, 'utf-8');\n        const historyObj = JSON.parse(historyStr);\n        return historyObj;\n    } catch (error) {\n        console.log(\"error in getting commit history: \", error);\n    }\n}\n\nexport function insertCommit(commitObj){\n    try {\n        const root = commitObj.rootDir;\n        const commitHistory = getCommitHistory(`${root}/.witness/commitHistory.json`);\n        commitHistory.push(commitObj);\n        writeFileSync(`${root}/.witness/commitHistory.json`,JSON.stringify(commitHistory));\n        return commitHistory;\n    } catch (error) {\n        console.log(\"error in inserting new commit in history: \", error);\n    }\n}\n\nexport function findWitnessRoot(currentDir) {\n    try {\n        console.log(\"inside findWitnessRoot, currentDir is: \" ,currentDir);\n        // const currentDir = cwd();\n        if(accessSync(`${currentDir}/.witness`, constants.F_OK) === undefined){\n            return currentDir;\n        }\n        else if(currentDir === \"/\"){\n            throw new CustomError(\".witness directory not found!!\")\n        }\n        else return findWitnessRoot(path.dirname(currentDir))\n    } catch (error) {\n        console.log(\"error in finding .Witness directory\",error);\n    }\n  }\n\n\n\n\n  // Example usage\n  const currentPath = process.cwd();"}],"fileMap":{"/home/aniket/desk/Projects/version control system/classes//Blob.js":"46649e08812b8e8cbb185c2f672b5900bee682e9","/home/aniket/desk/Projects/version control system/classes//Commit.js":"a41e8fe0f100d39cb508b53303ef045dd4984cdb","/home/aniket/desk/Projects/version control system/classes//CustomError.js":"92ed2e18fc71d78f74121e15c6d8e05d11bc9c6c","/home/aniket/desk/Projects/version control system/classes//Tree.js":"ea5d8a2a1ef2a071b63b82eda40ff6e088e3a453","/home/aniket/desk/Projects/version control system/classes//Witness.js":"33502d5ca0dcf022772b7917fb9a43404587091b","/home/aniket/desk/Projects/version control system/commands//commit.js":"aec95feb7e5d6dea43513deb0abaa96254db61b6","/home/aniket/desk/Projects/version control system/commands//initiate.js":"5082a006125e3321695f8028bd47245887ed347a","/home/aniket/desk/Projects/version control system/hehe.cpp":"50377f4229a6731053971c84076f7918f1d59cbd","/home/aniket/desk/Projects/version control system/index.js":"70f6c9d7d4b85176b7ba17ff6981a0348d6e0b09","/home/aniket/desk/Projects/version control system/node_modules//.package-lock.json":"12cdd4150943a93e0de79a933481a461a0984d3e","/home/aniket/desk/Projects/version control system/node_modules//crypto//README.md":"db31576d2541b2711331f43fec5f386365b48804","/home/aniket/desk/Projects/version control system/node_modules//crypto//package.json":"815f5deb5efafe119152c2f0d67f35359a1e9fb9","/home/aniket/desk/Projects/version control system/package-lock.json":"d03daad4a8980f371d606c9a412c01ab949404a1","/home/aniket/desk/Projects/version control system/package.json":"f0f4c7c0f675d4a4deb66d3b8787d5f1b96429a4","/home/aniket/desk/Projects/version control system/utils//utilities.js":"2723bb8b4dd2d683fe4f3aa0627952372861cc16"}}},{"rootDir":"/home/aniket/desk/Projects/version control system","message":"msg from argument","author":"author from argument","timestamp":1712210077148,"tree":{"files":[{"path":"/home/aniket/desk/Projects/version control system/classes//Blob.js","content":"import { createHash } from 'crypto';\nimport { writeFileSync } from \"fs\";\nimport { cwd } from 'process';\nimport Witness from \"./Witness.js\";\nimport { getInitiateObj as _getInitiateObj,findWitnessRoot } from \"../utils/utilities.js\";\nconst getInitiateObj = _getInitiateObj;\n\nconst currentDir = cwd();\n\nexport default class Blob{\n    constructor(content) {\n        try {\n            const rootDir = findWitnessRoot(currentDir);\n            const initObject = getInitiateObj(`${rootDir}/.witness/initiateObj.json`)\n    \n            this.content = content;\n            this.hash = this.calculateHash();\n            writeFileSync(`${initObject.rootDir}/.witness/objects/${this.hash}`, content);\n            \n        } catch (error) {\n            console.log(\"error in creating Blobs: \", error);\n        }\n    }\n\n    calculateHash() {\n        const hash = createHash('sha1').update(this.content).digest('hex');\n        return hash;\n    }\n}"},{"path":"/home/aniket/desk/Projects/version control system/classes//Commit.js","content":"import fs from \"fs\";\nimport Witness from \"./Witness.js\";\nimport Tree from \"./Tree.js\";\nimport CustomError from \"./CustomError.js\";\nimport { cwd } from 'process';\nimport { getInitiateObj as _getInitiateObj, findWitnessRoot} from \"../utils/utilities.js\";\nconst getInitiateObj = _getInitiateObj;\n\nconst currentDir = cwd();\n\nexport default class Commit{\n    constructor(message, author) {\n        try {\n            this.rootDir = findWitnessRoot(currentDir);\n            // const initObject = getInitiateObj(`${rootDir}/.witness/initiateObj`)\n            // initObject.versionId++;\n            // this.vId = initObject.versionId;\n            this.message = message;\n            this.author = author;\n            this.timestamp = Date.now();\n            this.tree = new Tree(this.rootDir); // Will be assigned a Tree object later\n            \n        } catch (error) {\n            console.log(\"error in creating Commit Object: \", error);            \n        }\n\n\n    }\n}"},{"path":"/home/aniket/desk/Projects/version control system/classes//CustomError.js","content":"export default class CustomError extends Error {\n    constructor(message) {\n      super(message);\n      this.name = \"MyCustomError\";\n    }\n  }"},{"path":"/home/aniket/desk/Projects/version control system/classes//Tree.js","content":"import { createHash } from 'crypto';\nimport { existsSync } from \"fs\";\nimport Witness from \"./Witness.js\";\nimport Blob from './Blob.js';\nimport { getInitiateObj as _getInitiateObj,getFilesSync } from \"../utils/utilities.js\";\nconst getInitiateObj = _getInitiateObj;\nimport path from 'path';\n\nexport default class Tree{\n    files = []\n    fileMap = {}\n    constructor(directory) {\n        try {\n            this.files = getFilesSync(directory);\n            this.files.forEach(element => {\n                // const blob = new Blob(element.content);\n                const hash = createHash('sha1').update(element.content).digest('hex');\n                this.fileMap[element.path] = hash;\n                if (!existsSync(`${directory}/.witness/objects/${hash}`)) {\n                    const blob = new Blob(element.content);\n                }\n            });\n            \n        } catch (error) {\n            console.log(\"error in creating Tree Object: \", error);\n        }\n    }\n\n\n\n    addFile(filename, content) {\n        const blob = new Blob(content);\n        this.entries[filename] = blob.hash;\n    }\n\n\n}"},{"path":"/home/aniket/desk/Projects/version control system/classes//Witness.js","content":"import { mkdirSync } from \"fs\";\n\nexport default class Witness {\n    constructor(dir) {\n        try {\n            mkdirSync(`.witness`);\n            mkdirSync(`.witness/objects`);\n            \n        } catch (error) {\n            console.error('Error creating directory:', error);    \n        }\n\n        this.rootDir = `${dir}/`;\n        this.versionId = 0;\n    }\n}\n"},{"path":"/home/aniket/desk/Projects/version control system/commands//commit.js","content":"import fs from \"fs\";\nimport Commit from \"../classes/Commit.js\";\nimport { getInitiateObj as _getInitiateObj, findWitnessRoot, getCommitHistory, insertCommit } from \"../utils/utilities.js\";\nimport { cwd } from 'process';\n\nfunction commit(msg, author) {\n\n\n    try {\n        const currentDir = cwd();\n\n        const commit = new Commit(msg, author);\n        console.log(commit);\n\n        insertCommit(commit);\n        const commitHistory = getCommitHistory(`${currentDir}/.witness/commitHistory.json`);\n\n        console.log(\"commit histoy is: \", commitHistory[3].tree.files);\n    } catch (error) {\n        console.log(error);\n    }\n\n\n}\n\ncommit(\"msg from argument\", \"author from argument\");"},{"path":"/home/aniket/desk/Projects/version control system/commands//initiate.js","content":"import { existsSync, writeFileSync } from \"fs\";\n// const initiate = require(\"..\");\nimport Witness from \"../classes/Witness.js\";\nimport { cwd } from 'process';\nimport { getInitiateObj as _getInitiateObj } from \"../utils/utilities.js\";\nconst getInitiateObj = _getInitiateObj;\n\nfunction initiate() {\n\n    const currentDir = cwd();\n\n    console.log(currentDir);\n    if (existsSync(`${currentDir}/.witness`)) {\n        console.log(\"witness has already been activated !\")\n        return;\n    }\n    const witness = new Witness(currentDir);//initializing witness\n\n    const commitHistory = [];\n\n\n\n\n    try {\n        writeFileSync(`${currentDir}/.witness/initiateObj.json`, JSON.stringify(witness));\n        console.log('initiateObj created successfully!');\n\n        writeFileSync(`${currentDir}/.witness/commitHistory.json`, JSON.stringify(commitHistory));\n        console.log('commitHistory created successfully!');\n        \n    } catch (error) {\n        console.error('Error creating initial files: ', error);\n        \n    }\n    \n    \n\n    const initObj = getInitiateObj(`${currentDir}/.witness/initiateObj.json`);\n\n    console.log(initObj);\n}\n\ninitiate();"},{"path":"/home/aniket/desk/Projects/version control system/hehe.cpp","content":"#include <iostream>\n#include <string>\n#include <unordered_map>\n#include <vector>\n#include <sstream>\n#include <crypto++/sha.h> // Include a cryptographic library for hashing\n\nusing namespace std;\nusing namespace CryptoPP;\n\n// Define a struct to represent a Blob object\nstruct Blob {\n  string content;\n  string hash;\n\n  // Calculate SHA-1 hash of the blob content\n  void calculateHash() {\n    SHA sha;\n    byte digest[SHA::DIGESTSIZE];\n    sha.CalculateDigest(digest, (const byte*)content.data(), content.size());\n    stringstream ss;\n    for (int i = 0; i < SHA::DIGESTSIZE; ++i) {\n      ss << hex << setw(2) << setfill('0') << (int)digest[i];\n    }\n    hash = ss.str();\n  }\n};\n\n// Define a struct to represent a Tree object\nstruct Tree {\n  unordered_map<string, string> entries; // Map of filename -> Blob hash\n\n  // Add a file (Blob) to the tree\n  void addFile(const string& filename, const Blob& blob) {\n    entries[filename] = blob.hash;\n  }\n};\n\n// Define a struct to represent a Commit object\nstruct Commit {\n  string message;\n  string author;\n  time_t timestamp;\n  Tree* tree; // Pointer to the referenced Tree object\n\n  // Constructor with basic details\n  Commit(const string& msg, const string& auth) : message(msg), author(auth), timestamp(time(nullptr)) {}\n};\n\nint main() {\n  // Create some Blobs (simulating files)\n  Blob blob1;\n  blob1.content = \"This is the content of file1.txt\";\n  blob1.calculateHash();\n\n  Blob blob2;\n  blob2.content = \"This is the content of file2.txt\";\n  blob2.calculateHash();\n\n  // Create a Tree with the Blobs\n  Tree tree;\n  tree.addFile(\"file1.txt\", blob1);\n  tree.addFile(\"file2.txt\", blob2);\n\n  // Create a Commit referencing the Tree\n  Commit commit(\"Initial commit\", \"John Doe\");\n  commit.tree = &tree;\n\n  // Simulate storing Blobs and Commit (not implemented here, would involve data structures)\n  cout << \"Blob1 hash: \" << blob1.hash << endl;\n  cout << \"Blob2 hash: \" << blob2.hash << endl;\n  cout << \"Commit message: \" << commit.message << endl;\n\n  return 0;\n}"},{"path":"/home/aniket/desk/Projects/version control system/index.js","content":"// const crypto = require('crypto'); // Use built-in crypto module for hashing\n// const fs = require(\"fs\");\n\n\n// // let versionId = 1;\n// // let rootDir = \"./\";\n\n// function isDirectory(path) {\n//     try {\n//         const stats = fs.statSync(path);\n//         return stats.isDirectory();\n//     } catch (err) {\n//         // Handle potential errors (e.g., path doesn't exist)\n//         return false; // Or throw an error if desired\n//     }\n// }\n\n// function getFilesSync(directoryPath) {\n//     const files = fs.readdirSync(directoryPath); // Get list of filenames\n//     const fileDetails = [];\n\n//     for (const filename of files) {\n//         const filePath = `${directoryPath}${filename}`; // Construct full path\n//         if (isDirectory(filePath)) {\n//             const innerFiles = getFilesSync(`${filePath}/`);\n//             fileDetails.push(...innerFiles);\n//         }\n//         else {\n//             const content = fs.readFileSync(filePath, 'utf8'); // Read file content\n//             fileDetails.push({ path: filePath, content }); // Store name and content\n//         }\n//     }\n//     return fileDetails;\n// }\n\n// class Witness {\n//     constructor() {\n//         fs.mkdir(`.witness`, (err) => {\n//             if (err) {\n//                 console.error('Error creating directory:', err);\n//             } else {\n//                 console.log('Directory created successfully!');\n//             }\n//         });\n//         fs.mkdir(`.witness/objects`, (err) => {\n//             if (err) {\n//                 console.error('Error creating directory:', err);\n//             } else {\n//                 console.log('Directory created successfully!');\n//             }\n//         })\n//         this.rootDir = `${__dirname}/`;\n//         this.versionId = 0;\n//     }\n// }\n\n\n\n\n\n// // Define a class to represent a Blob object\n// class Blob extends Witness {\n//     constructor(content) {\n//         this.content = content;\n//         this.hash = this.calculateHash();\n//         fs.writeFile(`${super.rootDir}/.witness/objects/${this.hash}`, content, (err) => {\n//             if (err) {\n//                 console.error('Error creating file:', err);\n//             } else {\n//                 console.log('File created successfully!');\n//             }\n//         });\n//     }\n\n//     calculateHash() {\n//         const hash = crypto.createHash('sha1').update(this.content).digest('hex');\n//         return hash;\n//     }\n// }\n\n// // Define a class to represent a Tree object\n// class Tree extends Witness{\n//     files = []\n//     fileMap = {}\n//     constructor(directory) {\n//         this.files = getFilesSync(directory);\n//         this.files.forEach(element => {\n//             // const blob = new Blob(element.content);\n//             const hash = crypto.createHash('sha1').update(element.content).digest('hex');\n//             this.fileMap[element.path] = hash;\n//             if (!fs.existsSync(`${super.rootDir}/.witness/objects/${hash}`)) {\n//                 const blob = new Blob(element.content);\n//             }\n//         });\n//     }\n\n\n\n//     addFile(filename, content) {\n//         const blob = new Blob(content);\n//         this.entries[filename] = blob.hash;\n//     }\n\n\n// }\n\n// // Define a class to represent a Commit object\n// class Commit extends Witness{\n//     constructor(message, author) {\n//         super.versionId++;\n//         this.vId = super.versionId;\n//         // this.treeHead = new Tree();\n//         this.message = message;\n//         this.author = author;\n//         this.timestamp = Date.now();\n//         this.tree = new Tree(super.rootDir); // Will be assigned a Tree object later\n\n\n//     }\n// }\n\n// function initiate() {\n//     console.log(\"hehe\");\n//     if (fs.existsSync(`${__dirname}/.witness`)) {\n//         console.log(\"witness has already been activated !\")\n//         return;\n//     }\n//     const witness = new Witness();//initializing witness\n//     console.log(witness);\n// }\n\n// function commit(msg, author) {\n//     const commit2 = new Commit(msg, author);\n//     console.log(commit2);\n// }\n\n\n// module.exports = initiate;\n\n\n// // console.log(commit);\n\n\n\n\n\n"},{"path":"/home/aniket/desk/Projects/version control system/node_modules//.package-lock.json","content":"{\n  \"name\": \"version-control-system\",\n  \"version\": \"1.0.0\",\n  \"lockfileVersion\": 3,\n  \"requires\": true,\n  \"packages\": {\n    \"node_modules/crypto\": {\n      \"version\": \"1.0.1\",\n      \"resolved\": \"https://registry.npmjs.org/crypto/-/crypto-1.0.1.tgz\",\n      \"integrity\": \"sha512-VxBKmeNcqQdiUQUW2Tzq0t377b54N2bMtXO/qiLa+6eRRmmC4qT3D4OnTGoT/U6O9aklQ/jTwbOtRMTTY8G0Ig==\",\n      \"deprecated\": \"This package is no longer supported. It's now a built-in Node module. If you've depended on crypto, you should switch to the one that's built-in.\"\n    }\n  }\n}\n"},{"path":"/home/aniket/desk/Projects/version control system/node_modules//crypto//README.md","content":"# Deprecated Package\n\nThis package is no longer supported and has been deprecated. To avoid malicious use, npm is hanging on to the package name.\n\nIt's now a built-in Node module. If you've depended on crypto, you should switch to the one that's built-in.\n\nPlease contact support@npmjs.com if you have questions about this package.\n"},{"path":"/home/aniket/desk/Projects/version control system/node_modules//crypto//package.json","content":"{\n  \"name\": \"crypto\",\n  \"version\": \"1.0.1\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/npm/deprecate-holder.git\"\n  },\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"bugs\": {\n    \"url\": \"https://github.com/npm/deprecate-holder/issues\"\n  },\n  \"homepage\": \"https://github.com/npm/deprecate-holder#readme\"\n}\n"},{"path":"/home/aniket/desk/Projects/version control system/package-lock.json","content":"{\n  \"name\": \"version-control-system\",\n  \"version\": \"1.0.0\",\n  \"lockfileVersion\": 3,\n  \"requires\": true,\n  \"packages\": {\n    \"\": {\n      \"name\": \"version-control-system\",\n      \"version\": \"1.0.0\",\n      \"license\": \"ISC\",\n      \"dependencies\": {\n        \"crypto\": \"^1.0.1\"\n      }\n    },\n    \"node_modules/crypto\": {\n      \"version\": \"1.0.1\",\n      \"resolved\": \"https://registry.npmjs.org/crypto/-/crypto-1.0.1.tgz\",\n      \"integrity\": \"sha512-VxBKmeNcqQdiUQUW2Tzq0t377b54N2bMtXO/qiLa+6eRRmmC4qT3D4OnTGoT/U6O9aklQ/jTwbOtRMTTY8G0Ig==\",\n      \"deprecated\": \"This package is no longer supported. It's now a built-in Node module. If you've depended on crypto, you should switch to the one that's built-in.\"\n    }\n  }\n}\n"},{"path":"/home/aniket/desk/Projects/version control system/package.json","content":"{\n  \"name\": \"version-control-system\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"type\": \"module\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"author\": \"aniket pandey\",\n  \"license\": \"ISC\",\n  \"dependencies\": {\n    \"crypto\": \"^1.0.1\"\n  }\n}\n"},{"path":"/home/aniket/desk/Projects/version control system/utils//utilities.js","content":"// const fs = require(\"fs\");\nimport { cwd } from 'process';\nimport CustomError from \"../classes/CustomError.js\";\nimport { statSync, readdirSync, readFileSync, accessSync, constants, writeFileSync } from \"fs\";\nimport path from 'path';\n\nexport function isDirectory(path) {\n    try {\n        const stats = statSync(path);\n        return stats.isDirectory();\n    } catch (err) {\n        // Handle potential errors (e.g., path doesn't exist)\n        return false; // Or throw an error if desired\n    }\n}\n\n\nexport function getFilesSync(directoryPath) {\n    try {\n        const files = readdirSync(directoryPath); // Get list of filenames\n        const fileDetails = [];\n    \n        for (const filename of files) {\n            if(filename===\".witness\"){\n                continue;\n            }\n            const filePath = `${directoryPath}/${filename}`; // Construct full path\n            if (isDirectory(filePath)) {\n                const innerFiles = getFilesSync(`${filePath}/`);\n                fileDetails.push(...innerFiles);\n            }\n            else {\n                const content = readFileSync(filePath, 'utf8'); // Read file content\n                fileDetails.push({ path: filePath, content }); // Store name and content\n            }\n        }\n        return fileDetails;\n        \n    } catch (error) {\n        console.log(\"error in getFilesSync: \", error);\n    }\n}\n\n\nexport function getInitiateObj(path){\n    try {\n        const initiateStr = readFileSync(path, 'utf-8');\n        const initiateObj = JSON.parse(initiateStr);\n        console.log(`the InitiateObj is: ${initiateObj}`);\n        return initiateObj;\n    } catch (error) {\n        console.log(`error while reading InitiateObj: ${error}`);\n    }\n}\n\nexport function getCommitHistory(path){\n    try {\n        const historyStr = readFileSync(path, 'utf-8');\n        const historyObj = JSON.parse(historyStr);\n        return historyObj;\n    } catch (error) {\n        console.log(\"error in getting commit history: \", error);\n    }\n}\n\nexport function insertCommit(commitObj){\n    try {\n        const root = commitObj.rootDir;\n        const commitHistory = getCommitHistory(`${root}/.witness/commitHistory.json`);\n        commitHistory.push(commitObj);\n        writeFileSync(`${root}/.witness/commitHistory.json`,JSON.stringify(commitHistory));\n        return commitHistory;\n    } catch (error) {\n        console.log(\"error in inserting new commit in history: \", error);\n    }\n}\n\nexport function findWitnessRoot(currentDir) {\n    try {\n        console.log(\"inside findWitnessRoot, currentDir is: \" ,currentDir);\n        // const currentDir = cwd();\n        if(accessSync(`${currentDir}/.witness`, constants.F_OK) === undefined){\n            return currentDir;\n        }\n        else if(currentDir === \"/\"){\n            throw new CustomError(\".witness directory not found!!\")\n        }\n        else return findWitnessRoot(path.dirname(currentDir))\n    } catch (error) {\n        console.log(\"error in finding .Witness directory\",error);\n    }\n  }\n\n\n\n\n  // Example usage\n  const currentPath = process.cwd();"}],"fileMap":{"/home/aniket/desk/Projects/version control system/classes//Blob.js":"46649e08812b8e8cbb185c2f672b5900bee682e9","/home/aniket/desk/Projects/version control system/classes//Commit.js":"a41e8fe0f100d39cb508b53303ef045dd4984cdb","/home/aniket/desk/Projects/version control system/classes//CustomError.js":"92ed2e18fc71d78f74121e15c6d8e05d11bc9c6c","/home/aniket/desk/Projects/version control system/classes//Tree.js":"ea5d8a2a1ef2a071b63b82eda40ff6e088e3a453","/home/aniket/desk/Projects/version control system/classes//Witness.js":"33502d5ca0dcf022772b7917fb9a43404587091b","/home/aniket/desk/Projects/version control system/commands//commit.js":"6d0e02f6b51c810593298d4f9bf9e97389b7db4d","/home/aniket/desk/Projects/version control system/commands//initiate.js":"5082a006125e3321695f8028bd47245887ed347a","/home/aniket/desk/Projects/version control system/hehe.cpp":"50377f4229a6731053971c84076f7918f1d59cbd","/home/aniket/desk/Projects/version control system/index.js":"70f6c9d7d4b85176b7ba17ff6981a0348d6e0b09","/home/aniket/desk/Projects/version control system/node_modules//.package-lock.json":"12cdd4150943a93e0de79a933481a461a0984d3e","/home/aniket/desk/Projects/version control system/node_modules//crypto//README.md":"db31576d2541b2711331f43fec5f386365b48804","/home/aniket/desk/Projects/version control system/node_modules//crypto//package.json":"815f5deb5efafe119152c2f0d67f35359a1e9fb9","/home/aniket/desk/Projects/version control system/package-lock.json":"d03daad4a8980f371d606c9a412c01ab949404a1","/home/aniket/desk/Projects/version control system/package.json":"f0f4c7c0f675d4a4deb66d3b8787d5f1b96429a4","/home/aniket/desk/Projects/version control system/utils//utilities.js":"2723bb8b4dd2d683fe4f3aa0627952372861cc16"}}}]